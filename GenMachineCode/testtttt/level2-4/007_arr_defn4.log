









































typecheck fin
program
    FunctionDefine function name: @main, type: i32
        FuncDefParamsNode NULL
        CompoundStmt
            DeclStmt
            DefNode	Const	Array
                Id	name: a	scope: 2	type: int array	size: 32
                    ArrayDimensions
                    ArrDim
                        IntegerLiteral	value: 4	type: i32
                        IntegerLiteral	value: 2	type: i32
                ArrValNode	Const	ValList
                    ArrValNode	Const	Expr
                        IntegerLiteral	value: 1	type: i32
                    ArrValNode	Const	Expr
                        IntegerLiteral	value: 2	type: i32
                    ArrValNode	Const	Expr
                        IntegerLiteral	value: 3	type: i32
                    ArrValNode	Const	Expr
                        IntegerLiteral	value: 4	type: i32
                    ArrValNode	Const	Expr
                        IntegerLiteral	value: 0	type: i32
                    ArrValNode	Const	Expr
                        IntegerLiteral	value: 0	type: i32
                    ArrValNode	Const	Expr
                        IntegerLiteral	value: 7	type: i32
                    ArrValNode	Const	Expr
                        IntegerLiteral	value: 0	type: i32
            DeclStmt
            DefNode	Const	NonArray
                Id	name: 3	scope: 2	type: i32	size: 4
                IntegerLiteral	value: 3	type: i32
            DeclStmt
            DefNode	Variable	Array
                Id	name: b	scope: 2	type: int array	size: 32
                    ArrayDimensions
                    ArrDim
                        IntegerLiteral	value: 4	type: i32
                        IntegerLiteral	value: 2	type: i32
                ArrValNode	Variable	ValList
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 0	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 0	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 0	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 0	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 0	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 0	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 0	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 0	type: i32
            DeclStmt
            DefNode	Variable	Array
                Id	name: c	scope: 2	type: int array	size: 32
                    ArrayDimensions
                    ArrDim
                        IntegerLiteral	value: 4	type: i32
                        IntegerLiteral	value: 2	type: i32
                ArrValNode	Variable	ValList
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 1	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 2	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 3	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 4	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 5	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 6	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 7	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 8	type: i32
            DeclStmt
            DefNode	Variable	Array
                Id	name: d	scope: 2	type: int array	size: 32
                    ArrayDimensions
                    ArrDim
                        IntegerLiteral	value: 4	type: i32
                        IntegerLiteral	value: 2	type: i32
                ArrValNode	Variable	ValList
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 1	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 2	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 3	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 0	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 5	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 0	type: i32
                    ArrValNode	Variable	Expr
                        Id	name: a	scope: 2	type: int array	size: 32
                            ArrayDimensions
                            ArrDim
                                IntegerLiteral	value: 3	type: i32
                                IntegerLiteral	value: 0	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 8	type: i32
            DeclStmt
            DefNode	Variable	Array
                Id	name: e	scope: 2	type: int array	size: 32
                    ArrayDimensions
                    ArrDim
                        IntegerLiteral	value: 4	type: i32
                        IntegerLiteral	value: 2	type: i32
                        IntegerLiteral	value: 1	type: i32
                ArrValNode	Variable	ValList
                    ArrValNode	Variable	Expr
                        Id	name: d	scope: 2	type: int array	size: 32
                            ArrayDimensions
                            ArrDim
                                IntegerLiteral	value: 2	type: i32
                                IntegerLiteral	value: 1	type: i32
                    ArrValNode	Variable	Expr
                        Id	name: c	scope: 2	type: int array	size: 32
                            ArrayDimensions
                            ArrDim
                                IntegerLiteral	value: 2	type: i32
                                IntegerLiteral	value: 1	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 3	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 4	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 5	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 6	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 7	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 8	type: i32
            ReturnStmt
                BinaryExpr	op: add     type:i32
                    BinaryExpr	op: add     type:i32
                        BinaryExpr	op: add     type:i32
                            Id	name: e	scope: 2	type: int array	size: 32
                                ArrayDimensions
                                ArrDim
                                    IntegerLiteral	value: 3	type: i32
                                    IntegerLiteral	value: 1	type: i32
                                    IntegerLiteral	value: 0	type: i32
                            Id	name: e	scope: 2	type: int array	size: 32
                                ArrayDimensions
                                ArrDim
                                    IntegerLiteral	value: 0	type: i32
                                    IntegerLiteral	value: 0	type: i32
                                    IntegerLiteral	value: 0	type: i32
                        Id	name: e	scope: 2	type: int array	size: 32
                            ArrayDimensions
                            ArrDim
                                IntegerLiteral	value: 0	type: i32
                                IntegerLiteral	value: 1	type: i32
                                IntegerLiteral	value: 0	type: i32
                    Id	name: d	scope: 2	type: int array	size: 32
                        ArrayDimensions
                        ArrDim
                            IntegerLiteral	value: 3	type: i32
                            IntegerLiteral	value: 0	type: i32
DeclStmt::genCode
DeclStmt::genCode
new StoreInstruction src:-1375803744
DeclStmt::genCode
DeclStmt::genCode
DeclStmt::genCode
Id::ArrgenCode
DeclStmt::genCode
Id::ArrgenCode
Id::ArrgenCode
ReturnStmt::genCode
Id::ArrgenCode
Id::ArrgenCode
Id::ArrgenCode
Id::ArrgenCode
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode7
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode7
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode7
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode7
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode7
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode7
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode7
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
RetInstruction::genMachineCode
RetInstruction::genMachineCode end
	.arch armv8-a
	.fpu vfpv3-d16
	.arch_extension crc
	.arm
	.text
	.global main
	.type main , %function
main:
	push {r7, r8, r9, r10, fp, lr}
	mov fp, sp
BinaryMInstruction::output() 
	sub sp, sp, #164
.L4:
	ldr r10, =0
BinaryMInstruction::output() 
	add r9, r10, #-164
	ldr r10, =1
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =4
BinaryMInstruction::output() 
	add r9, r10, #-164
	ldr r10, =2
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =8
BinaryMInstruction::output() 
	add r9, r10, #-164
	ldr r10, =3
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =12
BinaryMInstruction::output() 
	add r9, r10, #-164
	ldr r10, =4
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =16
BinaryMInstruction::output() 
	add r9, r10, #-164
	ldr r10, =0
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =20
BinaryMInstruction::output() 
	add r9, r10, #-164
	ldr r10, =0
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =24
BinaryMInstruction::output() 
	add r9, r10, #-164
	ldr r10, =7
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =28
BinaryMInstruction::output() 
	add r9, r10, #-164
	ldr r10, =0
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =3
	str r10, [fp, #-132]
	ldr r10, =0
BinaryMInstruction::output() 
	add r9, r10, #-128
	ldr r10, =0
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =4
BinaryMInstruction::output() 
	add r9, r10, #-128
	ldr r10, =0
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =8
BinaryMInstruction::output() 
	add r9, r10, #-128
	ldr r10, =0
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =12
BinaryMInstruction::output() 
	add r9, r10, #-128
	ldr r10, =0
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =16
BinaryMInstruction::output() 
	add r9, r10, #-128
	ldr r10, =0
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =20
BinaryMInstruction::output() 
	add r9, r10, #-128
	ldr r10, =0
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =24
BinaryMInstruction::output() 
	add r9, r10, #-128
	ldr r10, =0
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =28
BinaryMInstruction::output() 
	add r9, r10, #-128
	ldr r10, =0
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =0
BinaryMInstruction::output() 
	add r9, r10, #-96
	ldr r10, =1
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =4
BinaryMInstruction::output() 
	add r9, r10, #-96
	ldr r10, =2
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =8
BinaryMInstruction::output() 
	add r9, r10, #-96
	ldr r10, =3
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =12
BinaryMInstruction::output() 
	add r9, r10, #-96
	ldr r10, =4
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =16
BinaryMInstruction::output() 
	add r9, r10, #-96
	ldr r10, =5
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =20
BinaryMInstruction::output() 
	add r9, r10, #-96
	ldr r10, =6
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =24
BinaryMInstruction::output() 
	add r9, r10, #-96
	ldr r10, =7
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =28
BinaryMInstruction::output() 
	add r9, r10, #-96
	ldr r10, =8
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =0
BinaryMInstruction::output() 
	add r9, r10, #-64
	ldr r10, =1
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =4
BinaryMInstruction::output() 
	add r9, r10, #-64
	ldr r10, =2
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =8
BinaryMInstruction::output() 
	add r9, r10, #-64
	ldr r10, =3
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =12
BinaryMInstruction::output() 
	add r9, r10, #-64
	ldr r10, =0
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =16
BinaryMInstruction::output() 
	add r9, r10, #-64
	ldr r10, =5
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =20
BinaryMInstruction::output() 
	add r9, r10, #-64
	ldr r10, =0
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =3
	ldr r9, =2
BinaryMInstruction::output() 
	mul r8, r10, r9
BinaryMInstruction::output() 
	add r10, r8, #0
	ldr r9, =4
BinaryMInstruction::output() 
	mul r8, r10, r9
BinaryMInstruction::output() 
	add r10, r8, #-164
BinaryMInstruction::output() 
	add r9, fp, r10
	ldr r10, [r9]
	ldr r9, =24
BinaryMInstruction::output() 
	add r8, r9, #-64
BinaryMInstruction::output() 
	add r9, fp, r8
	str r10, [r9]
	ldr r10, =28
BinaryMInstruction::output() 
	add r9, r10, #-64
	ldr r10, =8
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =2
	ldr r9, =2
BinaryMInstruction::output() 
	mul r8, r10, r9
BinaryMInstruction::output() 
	add r10, r8, #1
	ldr r9, =4
BinaryMInstruction::output() 
	mul r8, r10, r9
BinaryMInstruction::output() 
	add r10, r8, #-64
BinaryMInstruction::output() 
	add r10, fp, r10
	ldr r9, [r10]
	ldr r10, =0
BinaryMInstruction::output() 
	add r8, r10, #-32
BinaryMInstruction::output() 
	add r10, fp, r8
	str r9, [r10]
	ldr r10, =2
	ldr r9, =2
BinaryMInstruction::output() 
	mul r8, r10, r9
BinaryMInstruction::output() 
	add r10, r8, #1
	ldr r9, =4
BinaryMInstruction::output() 
	mul r8, r10, r9
BinaryMInstruction::output() 
	add r10, r8, #-96
BinaryMInstruction::output() 
	add r9, fp, r10
	ldr r10, [r9]
	ldr r9, =4
BinaryMInstruction::output() 
	add r8, r9, #-32
BinaryMInstruction::output() 
	add r9, fp, r8
	str r10, [r9]
	ldr r10, =8
BinaryMInstruction::output() 
	add r9, r10, #-32
	ldr r10, =3
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =12
BinaryMInstruction::output() 
	add r9, r10, #-32
	ldr r10, =4
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =16
BinaryMInstruction::output() 
	add r9, r10, #-32
	ldr r10, =5
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =20
BinaryMInstruction::output() 
	add r9, r10, #-32
	ldr r10, =6
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =24
BinaryMInstruction::output() 
	add r9, r10, #-32
	ldr r10, =7
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =28
BinaryMInstruction::output() 
	add r9, r10, #-32
	ldr r10, =8
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =3
	ldr r9, =2
BinaryMInstruction::output() 
	mul r8, r10, r9
BinaryMInstruction::output() 
	add r10, r8, #1
	ldr r9, =1
BinaryMInstruction::output() 
	mul r8, r10, r9
BinaryMInstruction::output() 
	add r10, r8, #0
	ldr r9, =4
BinaryMInstruction::output() 
	mul r8, r10, r9
BinaryMInstruction::output() 
	add r10, r8, #-32
BinaryMInstruction::output() 
	add r9, fp, r10
	ldr r10, [r9]
	ldr r9, =0
	ldr r8, =2
BinaryMInstruction::output() 
	mul r7, r9, r8
BinaryMInstruction::output() 
	add r9, r7, #0
	ldr r8, =1
BinaryMInstruction::output() 
	mul r7, r9, r8
BinaryMInstruction::output() 
	add r9, r7, #0
	ldr r8, =4
BinaryMInstruction::output() 
	mul r7, r9, r8
BinaryMInstruction::output() 
	add r9, r7, #-32
BinaryMInstruction::output() 
	add r8, fp, r9
	ldr r9, [r8]
BinaryMInstruction::output() 
	add r8, r10, r9
	ldr r10, =0
	ldr r9, =2
BinaryMInstruction::output() 
	mul r7, r10, r9
BinaryMInstruction::output() 
	add r10, r7, #1
	ldr r9, =1
BinaryMInstruction::output() 
	mul r7, r10, r9
BinaryMInstruction::output() 
	add r10, r7, #0
	ldr r9, =4
BinaryMInstruction::output() 
	mul r7, r10, r9
BinaryMInstruction::output() 
	add r10, r7, #-32
BinaryMInstruction::output() 
	add r9, fp, r10
	ldr r10, [r9]
BinaryMInstruction::output() 
	add r9, r8, r10
	ldr r10, =3
	ldr r8, =2
BinaryMInstruction::output() 
	mul r7, r10, r8
BinaryMInstruction::output() 
	add r10, r7, #0
	ldr r8, =4
BinaryMInstruction::output() 
	mul r7, r10, r8
BinaryMInstruction::output() 
	add r10, r7, #-64
BinaryMInstruction::output() 
	add r8, fp, r10
	ldr r10, [r8]
BinaryMInstruction::output() 
	add r8, r9, r10
	mov r0, r8
	b .Lmain_END
.Lmain_END:
BinaryMInstruction::output() 
	add sp, sp, #164
	pop {r7, r8, r9, r10, fp, lr}
	bx  lr

