





typecheck fin
program
    DeclStmt
    DefNode	Const	Array
        Id	name: @a	scope: 0	type: int array	size: 20
            ArrayDimensions
            ArrDim
                IntegerLiteral	value: 5	type: i32
        ArrValNode	Const	ValList
            ArrValNode	Const	Expr
                IntegerLiteral	value: 0	type: i32
            ArrValNode	Const	Expr
                IntegerLiteral	value: 1	type: i32
            ArrValNode	Const	Expr
                IntegerLiteral	value: 2	type: i32
            ArrValNode	Const	Expr
                IntegerLiteral	value: 3	type: i32
            ArrValNode	Const	Expr
                IntegerLiteral	value: 4	type: i32
    FunctionDefine function name: @main, type: i32
        FuncDefParamsNode NULL
        CompoundStmt
            ReturnStmt
                Id	name: @a	scope: 0	type: int array	size: 20
                    ArrayDimensions
                    ArrDim
                        IntegerLiteral	value: 4	type: i32
DeclStmt::genCode
ReturnStmt::genCode
Id::ArrgenCode
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
RetInstruction::genMachineCode
RetInstruction::genMachineCode end
	.arch armv8-a
	.fpu vfpv3-d16
	.arch_extension crc
	.arm
	.data
	.global a
	.align 4
	.size a, 20
a:
	.word 0
	.word 1
	.word 2
	.word 3
	.word 4
	.text
	.global main
	.type main , %function
main:
	push {r8, r9, r10, fp, lr}
	mov fp, sp
BinaryMInstruction::output() 
	sub sp, sp, #0
.L5:
	ldr r10, =4
	ldr r9, =4
BinaryMInstruction::output() 
	mul r8, r10, r9
	ldr r10, addr__0
BinaryMInstruction::output() 
	add r9, r8, r10
	ldr r10, [r9]
	mov r0, r10
	b .Lmain_END
.Lmain_END:
BinaryMInstruction::output() 
	add sp, sp, #0
	pop {r8, r9, r10, fp, lr}
	bx  lr

addr_a_0:
	.word a
