typecheck fin
program
    DeclStmt
    DefNode	Variable	NonArray
        Id	name: @n	scope: 0	type: i32	size: 4
        This variable/constant is not assigned
    FunctionDefine function name: @counting_sort, type: i32
        FuncDefParamsNode
            Id	name: %ini_arr	scope: 1	type: int array	size: 4
                ArrayDimensions
                ArrDim
                    IntegerLiteral	value: -1	type: i32
            Id	name: %sorted_arr	scope: 1	type: int array	size: 4
                ArrayDimensions
                ArrDim
                    IntegerLiteral	value: -1	type: i32
            Id	name: %n	scope: 1	type: i32	size: 4
        CompoundStmt
            DeclStmt
            DefNode	Variable	Array
                Id	name: count_arr	scope: 2	type: int array	size: 40
                    ArrayDimensions
                    ArrDim
                        IntegerLiteral	value: 10	type: i32
                This variable/constant is not assigned
            DeclStmt
            DefNode	Variable	NonArray
                Id	name: i	scope: 2	type: i32	size: 4
                This variable/constant is not assigned
            DeclStmt
            DefNode	Variable	NonArray
                Id	name: j	scope: 2	type: i32	size: 4
                This variable/constant is not assigned
            DeclStmt
            DefNode	Variable	NonArray
                Id	name: k	scope: 2	type: i32	size: 4
                This variable/constant is not assigned
            AssignStmt
                Id	name: k	scope: 2	type: i32	size: 4
                IntegerLiteral	value: 0	type: i32
            AssignStmt
                Id	name: i	scope: 2	type: i32	size: 4
                IntegerLiteral	value: 0	type: i32
            AssignStmt
                Id	name: j	scope: 2	type: i32	size: 4
                IntegerLiteral	value: 0	type: i32
            WhileStmt
                BinaryExpr	op: less     type:i1
                    Id	name: k	scope: 2	type: i32	size: 4
                    IntegerLiteral	value: 10	type: i32
                CompoundStmt
                    AssignStmt
                        Id	name: count_arr	scope: 2	type: int array	size: 40
                            ArrayDimensions
                            ArrDim
                                Id	name: k	scope: 2	type: i32	size: 4
                        IntegerLiteral	value: 0	type: i32
                    AssignStmt
                        Id	name: k	scope: 2	type: i32	size: 4
                        BinaryExpr	op: add     type:i32
                            Id	name: k	scope: 2	type: i32	size: 4
                            IntegerLiteral	value: 1	type: i32
            WhileStmt
                BinaryExpr	op: less     type:i1
                    Id	name: i	scope: 2	type: i32	size: 4
                    Id	name: %n	scope: 1	type: i32	size: 4
                CompoundStmt
                    AssignStmt
                        Id	name: count_arr	scope: 2	type: int array	size: 40
                            ArrayDimensions
                            ArrDim
                                Id	name: %ini_arr	scope: 1	type: int array	size: 4
                                    ArrayDimensions
                                    ArrDim
                                        Id	name: i	scope: 2	type: i32	size: 4
                        BinaryExpr	op: add     type:i32
                            Id	name: count_arr	scope: 2	type: int array	size: 40
                                ArrayDimensions
                                ArrDim
                                    Id	name: %ini_arr	scope: 1	type: int array	size: 4
                                        ArrayDimensions
                                        ArrDim
                                            Id	name: i	scope: 2	type: i32	size: 4
                            IntegerLiteral	value: 1	type: i32
                    AssignStmt
                        Id	name: i	scope: 2	type: i32	size: 4
                        BinaryExpr	op: add     type:i32
                            Id	name: i	scope: 2	type: i32	size: 4
                            IntegerLiteral	value: 1	type: i32
            AssignStmt
                Id	name: k	scope: 2	type: i32	size: 4
                IntegerLiteral	value: 1	type: i32
            WhileStmt
                BinaryExpr	op: less     type:i1
                    Id	name: k	scope: 2	type: i32	size: 4
                    IntegerLiteral	value: 10	type: i32
                CompoundStmt
                    AssignStmt
                        Id	name: count_arr	scope: 2	type: int array	size: 40
                            ArrayDimensions
                            ArrDim
                                Id	name: k	scope: 2	type: i32	size: 4
                        BinaryExpr	op: add     type:i32
                            Id	name: count_arr	scope: 2	type: int array	size: 40
                                ArrayDimensions
                                ArrDim
                                    Id	name: k	scope: 2	type: i32	size: 4
                            Id	name: count_arr	scope: 2	type: int array	size: 40
                                ArrayDimensions
                                ArrDim
                                    BinaryExpr	op: sub     type:i32
                                        Id	name: k	scope: 2	type: i32	size: 4
                                        IntegerLiteral	value: 1	type: i32
                    AssignStmt
                        Id	name: k	scope: 2	type: i32	size: 4
                        BinaryExpr	op: add     type:i32
                            Id	name: k	scope: 2	type: i32	size: 4
                            IntegerLiteral	value: 1	type: i32
            AssignStmt
                Id	name: j	scope: 2	type: i32	size: 4
                Id	name: %n	scope: 1	type: i32	size: 4
            WhileStmt
                BinaryExpr	op: great     type:i1
                    Id	name: j	scope: 2	type: i32	size: 4
                    IntegerLiteral	value: 0	type: i32
                CompoundStmt
                    AssignStmt
                        Id	name: count_arr	scope: 2	type: int array	size: 40
                            ArrayDimensions
                            ArrDim
                                Id	name: %ini_arr	scope: 1	type: int array	size: 4
                                    ArrayDimensions
                                    ArrDim
                                        BinaryExpr	op: sub     type:i32
                                            Id	name: j	scope: 2	type: i32	size: 4
                                            IntegerLiteral	value: 1	type: i32
                        BinaryExpr	op: sub     type:i32
                            Id	name: count_arr	scope: 2	type: int array	size: 40
                                ArrayDimensions
                                ArrDim
                                    Id	name: %ini_arr	scope: 1	type: int array	size: 4
                                        ArrayDimensions
                                        ArrDim
                                            BinaryExpr	op: sub     type:i32
                                                Id	name: j	scope: 2	type: i32	size: 4
                                                IntegerLiteral	value: 1	type: i32
                            IntegerLiteral	value: 1	type: i32
                    AssignStmt
                        Id	name: %sorted_arr	scope: 1	type: int array	size: 4
                            ArrayDimensions
                            ArrDim
                                Id	name: count_arr	scope: 2	type: int array	size: 40
                                    ArrayDimensions
                                    ArrDim
                                        Id	name: %ini_arr	scope: 1	type: int array	size: 4
                                            ArrayDimensions
                                            ArrDim
                                                BinaryExpr	op: sub     type:i32
                                                    Id	name: j	scope: 2	type: i32	size: 4
                                                    IntegerLiteral	value: 1	type: i32
                        Id	name: %ini_arr	scope: 1	type: int array	size: 4
                            ArrayDimensions
                            ArrDim
                                BinaryExpr	op: sub     type:i32
                                    Id	name: j	scope: 2	type: i32	size: 4
                                    IntegerLiteral	value: 1	type: i32
                    AssignStmt
                        Id	name: j	scope: 2	type: i32	size: 4
                        BinaryExpr	op: sub     type:i32
                            Id	name: j	scope: 2	type: i32	size: 4
                            IntegerLiteral	value: 1	type: i32
            ReturnStmt
                IntegerLiteral	value: 0	type: i32
    FunctionDefine function name: @main, type: i32
        FuncDefParamsNode NULL
        CompoundStmt
            AssignStmt
                Id	name: @n	scope: 0	type: i32	size: 4
                IntegerLiteral	value: 10	type: i32
            DeclStmt
            DefNode	Variable	Array
                Id	name: a	scope: 2	type: int array	size: 40
                    ArrayDimensions
                    ArrDim
                        IntegerLiteral	value: 10	type: i32
                This variable/constant is not assigned
            AssignStmt
                Id	name: a	scope: 2	type: int array	size: 40
                    ArrayDimensions
                    ArrDim
                        IntegerLiteral	value: 0	type: i32
                IntegerLiteral	value: 4	type: i32
            AssignStmt
                Id	name: a	scope: 2	type: int array	size: 40
                    ArrayDimensions
                    ArrDim
                        IntegerLiteral	value: 1	type: i32
                IntegerLiteral	value: 3	type: i32
            AssignStmt
                Id	name: a	scope: 2	type: int array	size: 40
                    ArrayDimensions
                    ArrDim
                        IntegerLiteral	value: 2	type: i32
                IntegerLiteral	value: 9	type: i32
            AssignStmt
                Id	name: a	scope: 2	type: int array	size: 40
                    ArrayDimensions
                    ArrDim
                        IntegerLiteral	value: 3	type: i32
                IntegerLiteral	value: 2	type: i32
            AssignStmt
                Id	name: a	scope: 2	type: int array	size: 40
                    ArrayDimensions
                    ArrDim
                        IntegerLiteral	value: 4	type: i32
                IntegerLiteral	value: 0	type: i32
            AssignStmt
                Id	name: a	scope: 2	type: int array	size: 40
                    ArrayDimensions
                    ArrDim
                        IntegerLiteral	value: 5	type: i32
                IntegerLiteral	value: 1	type: i32
            AssignStmt
                Id	name: a	scope: 2	type: int array	size: 40
                    ArrayDimensions
                    ArrDim
                        IntegerLiteral	value: 6	type: i32
                IntegerLiteral	value: 6	type: i32
            AssignStmt
                Id	name: a	scope: 2	type: int array	size: 40
                    ArrayDimensions
                    ArrDim
                        IntegerLiteral	value: 7	type: i32
                IntegerLiteral	value: 5	type: i32
            AssignStmt
                Id	name: a	scope: 2	type: int array	size: 40
                    ArrayDimensions
                    ArrDim
                        IntegerLiteral	value: 8	type: i32
                IntegerLiteral	value: 7	type: i32
            AssignStmt
                Id	name: a	scope: 2	type: int array	size: 40
                    ArrayDimensions
                    ArrDim
                        IntegerLiteral	value: 9	type: i32
                IntegerLiteral	value: 8	type: i32
            DeclStmt
            DefNode	Variable	NonArray
                Id	name: i	scope: 2	type: i32	size: 4
                This variable/constant is not assigned
            AssignStmt
                Id	name: i	scope: 2	type: i32	size: 4
                IntegerLiteral	value: 0	type: i32
            DeclStmt
            DefNode	Variable	Array
                Id	name: b	scope: 2	type: int array	size: 40
                    ArrayDimensions
                    ArrDim
                        IntegerLiteral	value: 10	type: i32
                This variable/constant is not assigned
            AssignStmt
                Id	name: i	scope: 2	type: i32	size: 4
                FuncCallNode	funcName: @counting_sort	 funcType: i32	scope: 0
                    FuncCallParamsNode
                        Id	name: a	scope: 2	type: int array	size: 40
                        Id	name: b	scope: 2	type: int array	size: 40
                        Id	name: @n	scope: 0	type: i32	size: 4
            WhileStmt
                BinaryExpr	op: less     type:i1
                    Id	name: i	scope: 2	type: i32	size: 4
                    Id	name: @n	scope: 0	type: i32	size: 4
                CompoundStmt
                    DeclStmt
                    DefNode	Variable	NonArray
                        Id	name: tmp	scope: 3	type: i32	size: 4
                        This variable/constant is not assigned
                    AssignStmt
                        Id	name: tmp	scope: 3	type: i32	size: 4
                        Id	name: b	scope: 2	type: int array	size: 40
                            ArrayDimensions
                            ArrDim
                                Id	name: i	scope: 2	type: i32	size: 4
                    ExprStmtNode
                        FuncCallNode	funcName: @putint	 funcType: void	scope: 0
                            FuncCallParamsNode
                                Id	name: tmp	scope: 3	type: i32	size: 4
                    AssignStmt
                        Id	name: tmp	scope: 3	type: i32	size: 4
                        IntegerLiteral	value: 10	type: i32
                    ExprStmtNode
                        FuncCallNode	funcName: @putch	 funcType: void	scope: 0
                            FuncCallParamsNode
                                Id	name: tmp	scope: 3	type: i32	size: 4
                    AssignStmt
                        Id	name: i	scope: 2	type: i32	size: 4
                        BinaryExpr	op: add     type:i32
                            Id	name: i	scope: 2	type: i32	size: 4
                            IntegerLiteral	value: 1	type: i32
            ReturnStmt
                IntegerLiteral	value: 0	type: i32
DeclStmt::genCode
DeclStmt::genCode
DeclStmt::genCode
DeclStmt::genCode
DeclStmt::genCode
AssignStmt::genCode
AssignStmt::genCode
AssignStmt::genCode
WhileStmt::genCode
AssignStmt::genCode
AssignStmt::genCode
WhileStmt::genCode
AssignStmt::genCode
Id::ArrgenCode
Id::ArrgenCode
Id::ArrgenCode
AssignStmt::genCode
AssignStmt::genCode
WhileStmt::genCode
AssignStmt::genCode
Id::ArrgenCode
Id::ArrgenCode
AssignStmt::genCode
AssignStmt::genCode
WhileStmt::genCode
AssignStmt::genCode
Id::ArrgenCode
Id::ArrgenCode
Id::ArrgenCode
AssignStmt::genCode
Id::ArrgenCode
Id::ArrgenCode
Id::ArrgenCode
AssignStmt::genCode
ReturnStmt::genCode
AssignStmt::genCode
DeclStmt::genCode
AssignStmt::genCode
AssignStmt::genCode
AssignStmt::genCode
AssignStmt::genCode
AssignStmt::genCode
AssignStmt::genCode
AssignStmt::genCode
AssignStmt::genCode
AssignStmt::genCode
AssignStmt::genCode
DeclStmt::genCode
AssignStmt::genCode
DeclStmt::genCode
AssignStmt::genCode
Id::ArrgenCode
Id::ArrgenCode
callParams[0]->getexprkind() == ExprNode::CONSTANT  is 0
callParams[1]->getexprkind() == ExprNode::CONSTANT  is 0
callParams[2]->getexprkind() == ExprNode::CONSTANT  is 0
WhileStmt::genCode
DeclStmt::genCode
AssignStmt::genCode
Id::ArrgenCode
callParams[0]->getexprkind() == ExprNode::CONSTANT  is 0
AssignStmt::genCode
callParams[0]->getexprkind() == ExprNode::CONSTANT  is 0
AssignStmt::genCode
ReturnStmt::genCode
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode1
StoreInstruction::genMachineCode  end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode1
StoreInstruction::genMachineCode  end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode1
StoreInstruction::genMachineCode  end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
CmpInstruction::genMachineCode
CmpInstruction::genMachineCode end
CondBrInstruction::genMachineCode
CondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
CmpInstruction::genMachineCode
CmpInstruction::genMachineCode end
CondBrInstruction::genMachineCode
CondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode7
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
CmpInstruction::genMachineCode
CmpInstruction::genMachineCode end
CondBrInstruction::genMachineCode
CondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode7
LoadInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode7
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
CmpInstruction::genMachineCode
CmpInstruction::genMachineCode end
CondBrInstruction::genMachineCode
CondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode7
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode7
LoadInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
RetInstruction::genMachineCode
RetInstruction::genMachineCode end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
CallInstruction::genMachineCode
CallInstruction::genMachineCode int
CallInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
CmpInstruction::genMachineCode
CmpInstruction::genMachineCode end
CondBrInstruction::genMachineCode
CondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode7
LoadInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
CallInstruction::genMachineCode
CallInstruction::genMachineCode int
CallInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
CallInstruction::genMachineCode
CallInstruction::genMachineCode int
CallInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
RetInstruction::genMachineCode
RetInstruction::genMachineCode end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
	.arch armv8-a
	.fpu vfpv3-d16
	.arch_extension crc
	.arm
	.data
	.global n
	.align 4
	.size n, 4
n:
	.word 0
	.text
	.global counting_sort
	.type counting_sort , %function
counting_sort:
	push {r6, r7, r8, r9, r10, fp, lr}
	mov fp, sp
BinaryMInstruction::output() 
	sub sp, sp, #64
.L21:
	str r0, [fp, #-64]
	str r1, [fp, #-60]
	str r2, [fp, #-56]
	ldr r10, =0
	str r10, [fp, #-4]
	ldr r10, =0
	str r10, [fp, #-12]
	ldr r10, =0
	str r10, [fp, #-8]
	b .L29
.L29:
	ldr r10, [fp, #-4]
	ldr r9, =10
	cmp r10, r9
	movlt r10, #1
	movge r10, #0
	blt .L30
	b .L34
.L30:
	ldr r10, [fp, #-4]
	ldr r9, =4
BinaryMInstruction::output() 
	mul r8, r10, r9
BinaryMInstruction::output() 
	add r10, r8, #-52
	ldr r9, =0
BinaryMInstruction::output() 
	add r8, fp, r10
	str r9, [r8]
	ldr r10, [fp, #-4]
BinaryMInstruction::output() 
	add r9, r10, #1
	str r9, [fp, #-4]
	b .L29
.L31:
	b .L40
.L33:
.L34:
	b .L31
.L35:
.L40:
	ldr r10, [fp, #-12]
	ldr r9, [fp, #-56]
	cmp r10, r9
	movlt r10, #1
	movge r10, #0
	blt .L41
	b .L46
.L41:
	ldr r10, [fp, #-12]
	ldr r9, [fp, #-64]
	ldr r8, =4
BinaryMInstruction::output() 
	mul r7, r10, r8
BinaryMInstruction::output() 
	add r10, r7, r9
	ldr r9, [r10]
	ldr r10, =4
BinaryMInstruction::output() 
	mul r8, r9, r10
BinaryMInstruction::output() 
	add r10, r8, #-52
BinaryMInstruction::output() 
	add r9, fp, r10
	ldr r10, [r9]
BinaryMInstruction::output() 
	add r9, r10, #1
	ldr r10, [fp, #-12]
	ldr r8, [fp, #-64]
	ldr r7, =4
BinaryMInstruction::output() 
	mul r6, r10, r7
BinaryMInstruction::output() 
	add r10, r6, r8
	ldr r8, [r10]
	ldr r10, =4
BinaryMInstruction::output() 
	mul r7, r8, r10
BinaryMInstruction::output() 
	add r10, r7, #-52
BinaryMInstruction::output() 
	add r8, fp, r10
	str r9, [r8]
	ldr r10, [fp, #-12]
BinaryMInstruction::output() 
	add r9, r10, #1
	str r9, [fp, #-12]
	b .L40
.L42:
	ldr r10, =1
	str r10, [fp, #-4]
	b .L64
.L45:
.L46:
	b .L42
.L47:
.L64:
	ldr r10, [fp, #-4]
	ldr r9, =10
	cmp r10, r9
	movlt r10, #1
	movge r10, #0
	blt .L65
	b .L69
.L65:
	ldr r10, [fp, #-4]
	ldr r9, =4
BinaryMInstruction::output() 
	mul r8, r10, r9
BinaryMInstruction::output() 
	add r10, r8, #-52
BinaryMInstruction::output() 
	add r9, fp, r10
	ldr r10, [r9]
	ldr r9, [fp, #-4]
BinaryMInstruction::output() 
	sub r8, r9, #1
	ldr r9, =4
BinaryMInstruction::output() 
	mul r7, r8, r9
BinaryMInstruction::output() 
	add r9, r7, #-52
BinaryMInstruction::output() 
	add r8, fp, r9
	ldr r9, [r8]
BinaryMInstruction::output() 
	add r8, r10, r9
	ldr r10, [fp, #-4]
	ldr r9, =4
BinaryMInstruction::output() 
	mul r7, r10, r9
BinaryMInstruction::output() 
	add r10, r7, #-52
BinaryMInstruction::output() 
	add r9, fp, r10
	str r8, [r9]
	ldr r10, [fp, #-4]
BinaryMInstruction::output() 
	add r9, r10, #1
	str r9, [fp, #-4]
	b .L64
.L66:
	ldr r10, [fp, #-56]
	str r10, [fp, #-8]
	b .L84
.L68:
.L69:
	b .L66
.L70:
.L84:
	ldr r10, [fp, #-8]
	ldr r9, =0
	cmp r10, r9
	movgt r10, #1
	movle r10, #0
	bgt .L85
	b .L89
.L85:
	ldr r10, [fp, #-8]
BinaryMInstruction::output() 
	sub r9, r10, #1
	ldr r10, [fp, #-64]
	ldr r8, =4
BinaryMInstruction::output() 
	mul r7, r9, r8
BinaryMInstruction::output() 
	add r9, r7, r10
	ldr r10, [r9]
	ldr r9, =4
BinaryMInstruction::output() 
	mul r8, r10, r9
BinaryMInstruction::output() 
	add r10, r8, #-52
BinaryMInstruction::output() 
	add r9, fp, r10
	ldr r10, [r9]
BinaryMInstruction::output() 
	sub r9, r10, #1
	ldr r10, [fp, #-8]
BinaryMInstruction::output() 
	sub r8, r10, #1
	ldr r10, [fp, #-64]
	ldr r7, =4
BinaryMInstruction::output() 
	mul r6, r8, r7
BinaryMInstruction::output() 
	add r8, r6, r10
	ldr r10, [r8]
	ldr r8, =4
BinaryMInstruction::output() 
	mul r7, r10, r8
BinaryMInstruction::output() 
	add r10, r7, #-52
BinaryMInstruction::output() 
	add r8, fp, r10
	str r9, [r8]
	ldr r10, [fp, #-8]
BinaryMInstruction::output() 
	sub r9, r10, #1
	ldr r10, [fp, #-64]
	ldr r8, =4
BinaryMInstruction::output() 
	mul r7, r9, r8
BinaryMInstruction::output() 
	add r9, r7, r10
	ldr r10, [r9]
	ldr r9, [fp, #-8]
BinaryMInstruction::output() 
	sub r8, r9, #1
	ldr r9, [fp, #-64]
	ldr r7, =4
BinaryMInstruction::output() 
	mul r6, r8, r7
BinaryMInstruction::output() 
	add r8, r6, r9
	ldr r9, [r8]
	ldr r8, =4
BinaryMInstruction::output() 
	mul r7, r9, r8
BinaryMInstruction::output() 
	add r9, r7, #-52
BinaryMInstruction::output() 
	add r8, fp, r9
	ldr r9, [r8]
	ldr r8, [fp, #-60]
	ldr r7, =4
BinaryMInstruction::output() 
	mul r6, r9, r7
BinaryMInstruction::output() 
	add r9, r6, r8
	str r10, [r9]
	ldr r10, [fp, #-8]
BinaryMInstruction::output() 
	sub r9, r10, #1
	str r9, [fp, #-8]
	b .L84
.L86:
	ldr r10, =0
	mov r0, r10
	b .Lcounting_sort_END
.L88:
.L89:
	b .L86
.L90:
.Lcounting_sort_END:
BinaryMInstruction::output() 
	add sp, sp, #64
	pop {r6, r7, r8, r9, r10, fp, lr}
	bx  lr

	.global main
	.type main , %function
main:
	push {r7, r8, r9, r10, fp, lr}
	mov fp, sp
BinaryMInstruction::output() 
	sub sp, sp, #88
.L123:
	ldr r10, =10
	ldr r9, addr__0
	str r10, [r9]
	ldr r10, =0
	ldr r9, =4
BinaryMInstruction::output() 
	mul r8, r10, r9
BinaryMInstruction::output() 
	add r10, r8, #-88
	ldr r9, =4
BinaryMInstruction::output() 
	add r8, fp, r10
	str r9, [r8]
	ldr r10, =1
	ldr r9, =4
BinaryMInstruction::output() 
	mul r8, r10, r9
BinaryMInstruction::output() 
	add r10, r8, #-88
	ldr r9, =3
BinaryMInstruction::output() 
	add r8, fp, r10
	str r9, [r8]
	ldr r10, =2
	ldr r9, =4
BinaryMInstruction::output() 
	mul r8, r10, r9
BinaryMInstruction::output() 
	add r10, r8, #-88
	ldr r9, =9
BinaryMInstruction::output() 
	add r8, fp, r10
	str r9, [r8]
	ldr r10, =3
	ldr r9, =4
BinaryMInstruction::output() 
	mul r8, r10, r9
BinaryMInstruction::output() 
	add r10, r8, #-88
	ldr r9, =2
BinaryMInstruction::output() 
	add r8, fp, r10
	str r9, [r8]
	ldr r10, =4
	ldr r9, =4
BinaryMInstruction::output() 
	mul r8, r10, r9
BinaryMInstruction::output() 
	add r10, r8, #-88
	ldr r9, =0
BinaryMInstruction::output() 
	add r8, fp, r10
	str r9, [r8]
	ldr r10, =5
	ldr r9, =4
BinaryMInstruction::output() 
	mul r8, r10, r9
BinaryMInstruction::output() 
	add r10, r8, #-88
	ldr r9, =1
BinaryMInstruction::output() 
	add r8, fp, r10
	str r9, [r8]
	ldr r10, =6
	ldr r9, =4
BinaryMInstruction::output() 
	mul r8, r10, r9
BinaryMInstruction::output() 
	add r10, r8, #-88
	ldr r9, =6
BinaryMInstruction::output() 
	add r8, fp, r10
	str r9, [r8]
	ldr r10, =7
	ldr r9, =4
BinaryMInstruction::output() 
	mul r8, r10, r9
BinaryMInstruction::output() 
	add r10, r8, #-88
	ldr r9, =5
BinaryMInstruction::output() 
	add r8, fp, r10
	str r9, [r8]
	ldr r10, =8
	ldr r9, =4
BinaryMInstruction::output() 
	mul r8, r10, r9
BinaryMInstruction::output() 
	add r10, r8, #-88
	ldr r9, =7
BinaryMInstruction::output() 
	add r8, fp, r10
	str r9, [r8]
	ldr r10, =9
	ldr r9, =4
BinaryMInstruction::output() 
	mul r8, r10, r9
BinaryMInstruction::output() 
	add r10, r8, #-88
	ldr r9, =8
BinaryMInstruction::output() 
	add r8, fp, r10
	str r9, [r8]
	ldr r10, =0
	str r10, [fp, #-48]
	ldr r10, =0
BinaryMInstruction::output() 
	add r9, r10, #-88
	ldr r10, =0
BinaryMInstruction::output() 
	add r8, r10, #-44
	ldr r10, addr__0
	ldr r7, [r10]
	mov r2, r7
BinaryMInstruction::output() 
	add r10, fp, r8
	mov r1, r10
BinaryMInstruction::output() 
	add r10, fp, r9
	mov r0, r10
	bl  counting_sort
	mov r10, r0
	str r10, [fp, #-48]
	b .L152
.L152:
	ldr r10, [fp, #-48]
	ldr r9, addr__0
	ldr r8, [r9]
	cmp r10, r8
	movlt r10, #1
	movge r10, #0
	blt .L153
	b .L158
.L153:
	ldr r10, [fp, #-48]
	ldr r9, =4
BinaryMInstruction::output() 
	mul r8, r10, r9
BinaryMInstruction::output() 
	add r10, r8, #-44
BinaryMInstruction::output() 
	add r9, fp, r10
	ldr r10, [r9]
	str r10, [fp, #-4]
	ldr r10, [fp, #-4]
	mov r0, r10
	bl  putint
	ldr r10, =10
	str r10, [fp, #-4]
	ldr r10, [fp, #-4]
	mov r0, r10
	bl  putch
	ldr r10, [fp, #-48]
BinaryMInstruction::output() 
	add r9, r10, #1
	str r9, [fp, #-48]
	b .L152
.L154:
	ldr r10, =0
	mov r0, r10
	b .Lmain_END
.L157:
.L158:
	b .L154
.L159:
.Lmain_END:
BinaryMInstruction::output() 
	add sp, sp, #88
	pop {r7, r8, r9, r10, fp, lr}
	bx  lr

addr_n_0:
	.word n
TOTAL: 0H-0M-0S-0us
