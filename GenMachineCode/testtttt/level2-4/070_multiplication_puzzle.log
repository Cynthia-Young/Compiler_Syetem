






typecheck fin
program
    DeclStmt
    DefNode	Variable	Array
        Id	name: @a	scope: 0	type: int array	size: 24
            ArrayDimensions
            ArrDim
                IntegerLiteral	value: 6	type: i32
        ArrValNode	Variable	ValList
            ArrValNode	Variable	Expr
                IntegerLiteral	value: 10	type: i32
            ArrValNode	Variable	Expr
                IntegerLiteral	value: 1	type: i32
            ArrValNode	Variable	Expr
                IntegerLiteral	value: 50	type: i32
            ArrValNode	Variable	Expr
                IntegerLiteral	value: 50	type: i32
            ArrValNode	Variable	Expr
                IntegerLiteral	value: 20	type: i32
            ArrValNode	Variable	Expr
                IntegerLiteral	value: 5	type: i32
    DeclStmt
    DefNode	Variable	Array
        Id	name: @dp	scope: 0	type: int array	size: 400
            ArrayDimensions
            ArrDim
                IntegerLiteral	value: 10	type: i32
                IntegerLiteral	value: 10	type: i32
        This variable/constant is not assigned
    FunctionDefine function name: @main, type: i32
        FuncDefParamsNode NULL
        CompoundStmt
            DeclStmt
            DefNode	Variable	NonArray
                Id	name: n	scope: 2	type: i32	size: 4
                This variable/constant is not assigned
            AssignStmt
                Id	name: n	scope: 2	type: i32	size: 4
                IntegerLiteral	value: 6	type: i32
            DeclStmt
            DefNode	Variable	NonArray
                Id	name: k	scope: 2	type: i32	size: 4
                This variable/constant is not assigned
            DefNode	Variable	NonArray
                Id	name: i	scope: 2	type: i32	size: 4
                This variable/constant is not assigned
            DefNode	Variable	NonArray
                Id	name: t	scope: 2	type: i32	size: 4
                This variable/constant is not assigned
            DefNode	Variable	NonArray
                Id	name: j	scope: 2	type: i32	size: 4
                This variable/constant is not assigned
            DefNode	Variable	NonArray
                Id	name: aa	scope: 2	type: i32	size: 4
                This variable/constant is not assigned
            AssignStmt
                Id	name: k	scope: 2	type: i32	size: 4
                IntegerLiteral	value: 3	type: i32
            WhileStmt
                BinaryExpr	op: lesseq     type:i1
                    Id	name: k	scope: 2	type: i32	size: 4
                    Id	name: n	scope: 2	type: i32	size: 4
                CompoundStmt
                    AssignStmt
                        Id	name: i	scope: 2	type: i32	size: 4
                        IntegerLiteral	value: 0	type: i32
                    WhileStmt
                        BinaryExpr	op: less     type:i1
                            Id	name: i	scope: 2	type: i32	size: 4
                            BinaryExpr	op: add     type:i32
                                BinaryExpr	op: sub     type:i32
                                    Id	name: n	scope: 2	type: i32	size: 4
                                    Id	name: k	scope: 2	type: i32	size: 4
                                IntegerLiteral	value: 1	type: i32
                        CompoundStmt
                            AssignStmt
                                Id	name: j	scope: 2	type: i32	size: 4
                                BinaryExpr	op: sub     type:i32
                                    BinaryExpr	op: add     type:i32
                                        Id	name: i	scope: 2	type: i32	size: 4
                                        Id	name: k	scope: 2	type: i32	size: 4
                                    IntegerLiteral	value: 1	type: i32
                            AssignStmt
                                Id	name: t	scope: 2	type: i32	size: 4
                                BinaryExpr	op: add     type:i32
                                    Id	name: i	scope: 2	type: i32	size: 4
                                    IntegerLiteral	value: 1	type: i32
                            WhileStmt
                                BinaryExpr	op: less     type:i1
                                    Id	name: t	scope: 2	type: i32	size: 4
                                    Id	name: j	scope: 2	type: i32	size: 4
                                CompoundStmt
                                    AssignStmt
                                        Id	name: aa	scope: 2	type: i32	size: 4
                                        BinaryExpr	op: add     type:i32
                                            BinaryExpr	op: add     type:i32
                                                Id	name: @dp	scope: 0	type: int array	size: 400
                                                    ArrayDimensions
                                                    ArrDim
                                                        Id	name: i	scope: 2	type: i32	size: 4
                                                        Id	name: t	scope: 2	type: i32	size: 4
                                                Id	name: @dp	scope: 0	type: int array	size: 400
                                                    ArrayDimensions
                                                    ArrDim
                                                        Id	name: t	scope: 2	type: i32	size: 4
                                                        Id	name: j	scope: 2	type: i32	size: 4
                                            BinaryExpr	op: mul     type:i32
                                                BinaryExpr	op: mul     type:i32
                                                    Id	name: @a	scope: 0	type: int array	size: 24
                                                        ArrayDimensions
                                                        ArrDim
                                                            Id	name: i	scope: 2	type: i32	size: 4
                                                    Id	name: @a	scope: 0	type: int array	size: 24
                                                        ArrayDimensions
                                                        ArrDim
                                                            Id	name: t	scope: 2	type: i32	size: 4
                                                Id	name: @a	scope: 0	type: int array	size: 24
                                                    ArrayDimensions
                                                    ArrDim
                                                        Id	name: j	scope: 2	type: i32	size: 4
                                    IfStmt
                                        BinaryExpr	op: or     type:i1
                                            SingleExpr	op: not     type:i1
                                                Id	name: @dp	scope: 0	type: int array	size: 400
                                                    ArrayDimensions
                                                    ArrDim
                                                        Id	name: i	scope: 2	type: i32	size: 4
                                                        Id	name: j	scope: 2	type: i32	size: 4
                                            BinaryExpr	op: less     type:i1
                                                Id	name: aa	scope: 2	type: i32	size: 4
                                                Id	name: @dp	scope: 0	type: int array	size: 400
                                                    ArrayDimensions
                                                    ArrDim
                                                        Id	name: i	scope: 2	type: i32	size: 4
                                                        Id	name: j	scope: 2	type: i32	size: 4
                                        CompoundStmt
                                            AssignStmt
                                                Id	name: @dp	scope: 0	type: int array	size: 400
                                                    ArrayDimensions
                                                    ArrDim
                                                        Id	name: i	scope: 2	type: i32	size: 4
                                                        Id	name: j	scope: 2	type: i32	size: 4
                                                Id	name: aa	scope: 2	type: i32	size: 4
                                    AssignStmt
                                        Id	name: t	scope: 2	type: i32	size: 4
                                        BinaryExpr	op: add     type:i32
                                            Id	name: t	scope: 2	type: i32	size: 4
                                            IntegerLiteral	value: 1	type: i32
                            AssignStmt
                                Id	name: i	scope: 2	type: i32	size: 4
                                BinaryExpr	op: add     type:i32
                                    Id	name: i	scope: 2	type: i32	size: 4
                                    IntegerLiteral	value: 1	type: i32
                    AssignStmt
                        Id	name: k	scope: 2	type: i32	size: 4
                        BinaryExpr	op: add     type:i32
                            Id	name: k	scope: 2	type: i32	size: 4
                            IntegerLiteral	value: 1	type: i32
            ExprStmtNode
                FuncCallNode	funcName: @putint	 funcType: void	scope: 0
                    FuncCallParamsNode
                        Id	name: @dp	scope: 0	type: int array	size: 400
                            ArrayDimensions
                            ArrDim
                                IntegerLiteral	value: 0	type: i32
                                BinaryExpr	op: sub     type:i32
                                    Id	name: n	scope: 2	type: i32	size: 4
                                    IntegerLiteral	value: 1	type: i32
            ReturnStmt
                IntegerLiteral	value: 0	type: i32
DeclStmt::genCode
DeclStmt::genCode
DeclStmt::genCode
AssignStmt::genCode
DeclStmt::genCode
AssignStmt::genCode
WhileStmt::genCode
AssignStmt::genCode
WhileStmt::genCode
AssignStmt::genCode
AssignStmt::genCode
WhileStmt::genCode
AssignStmt::genCode
Id::ArrgenCode
Id::ArrgenCode
Id::ArrgenCode
Id::ArrgenCode
Id::ArrgenCode
Id::ArrgenCode
Id::ArrgenCode
AssignStmt::genCode
AssignStmt::genCode
AssignStmt::genCode
AssignStmt::genCode
Id::ArrgenCode
callParams[0]->getexprkind() == ExprNode::CONSTANT  is 0
ReturnStmt::genCode
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
CmpInstruction::genMachineCode
CmpInstruction::genMachineCode end
CondBrInstruction::genMachineCode
CondBrInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
CallInstruction::genMachineCode
CallInstruction::genMachineCode int
CallInstruction::genMachineCode end
RetInstruction::genMachineCode
RetInstruction::genMachineCode end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
CmpInstruction::genMachineCode
CmpInstruction::genMachineCode end
CondBrInstruction::genMachineCode
CondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
CmpInstruction::genMachineCode
CmpInstruction::genMachineCode end
CondBrInstruction::genMachineCode
CondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
CmpInstruction::genMachineCode
CmpInstruction::genMachineCode end
CondBrInstruction::genMachineCode
CondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
CmpInstruction::genMachineCode
CmpInstruction::genMachineCode end
CondBrInstruction::genMachineCode
CondBrInstruction::genMachineCode end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
	.arch armv8-a
	.fpu vfpv3-d16
	.arch_extension crc
	.arm
	.data
	.global a
	.align 4
	.size a, 24
a:
	.word 10
	.word 1
	.word 50
	.word 50
	.word 20
	.word 5
	.comm	dp,400,4
	.text
	.global main
	.type main , %function
main:
	push {r6, r7, r8, r9, r10, fp, lr}
	mov fp, sp
BinaryMInstruction::output() 
	sub sp, sp, #24
.L26:
	ldr r10, =6
	str r10, [fp, #-24]
	ldr r10, =3
	str r10, [fp, #-20]
	b .L33
.L33:
	ldr r10, [fp, #-20]
	ldr r9, [fp, #-24]
	cmp r10, r9
	movle r10, #1
	movgt r10, #0
	ble .L34
	b .L39
.L34:
	ldr r10, =0
	str r10, [fp, #-16]
	b .L41
.L35:
	ldr r10, [fp, #-24]
BinaryMInstruction::output() 
	sub r9, r10, #1
	ldr r10, =0
	ldr r8, =10
BinaryMInstruction::output() 
	mul r7, r10, r8
BinaryMInstruction::output() 
	add r10, r7, r9
	ldr r9, =4
BinaryMInstruction::output() 
	mul r8, r10, r9
	ldr r10, addr_p_0
BinaryMInstruction::output() 
	add r9, r8, r10
	ldr r10, [r9]
	mov r0, r10
	bl  putint
	ldr r10, =0
	mov r0, r10
	b .Lmain_END
.L38:
.L39:
	b .L35
.L40:
.L41:
	ldr r10, [fp, #-16]
	ldr r9, [fp, #-24]
	ldr r8, [fp, #-20]
BinaryMInstruction::output() 
	sub r7, r9, r8
BinaryMInstruction::output() 
	add r9, r7, #1
	cmp r10, r9
	movlt r10, #1
	movge r10, #0
	blt .L42
	b .L48
.L42:
	ldr r10, [fp, #-16]
	ldr r9, [fp, #-20]
BinaryMInstruction::output() 
	add r8, r10, r9
BinaryMInstruction::output() 
	sub r10, r8, #1
	str r10, [fp, #-8]
	ldr r10, [fp, #-16]
BinaryMInstruction::output() 
	add r9, r10, #1
	str r9, [fp, #-12]
	b .L53
.L43:
	ldr r10, [fp, #-20]
BinaryMInstruction::output() 
	add r9, r10, #1
	str r9, [fp, #-20]
	b .L33
.L47:
.L48:
	b .L43
.L49:
.L53:
	ldr r10, [fp, #-12]
	ldr r9, [fp, #-8]
	cmp r10, r9
	movlt r10, #1
	movge r10, #0
	blt .L54
	b .L59
.L54:
	ldr r10, [fp, #-16]
	ldr r9, [fp, #-12]
	ldr r8, =10
BinaryMInstruction::output() 
	mul r7, r10, r8
BinaryMInstruction::output() 
	add r10, r7, r9
	ldr r9, =4
BinaryMInstruction::output() 
	mul r8, r10, r9
	ldr r10, addr_p_0
BinaryMInstruction::output() 
	add r9, r8, r10
	ldr r10, [r9]
	ldr r9, [fp, #-12]
	ldr r8, [fp, #-8]
	ldr r7, =10
BinaryMInstruction::output() 
	mul r6, r9, r7
BinaryMInstruction::output() 
	add r9, r6, r8
	ldr r8, =4
BinaryMInstruction::output() 
	mul r7, r9, r8
	ldr r9, addr_p_0
BinaryMInstruction::output() 
	add r8, r7, r9
	ldr r9, [r8]
BinaryMInstruction::output() 
	add r8, r10, r9
	ldr r10, [fp, #-16]
	ldr r9, =4
BinaryMInstruction::output() 
	mul r7, r10, r9
	ldr r10, addr__0
BinaryMInstruction::output() 
	add r9, r7, r10
	ldr r10, [r9]
	ldr r9, [fp, #-12]
	ldr r7, =4
BinaryMInstruction::output() 
	mul r6, r9, r7
	ldr r9, addr__0
BinaryMInstruction::output() 
	add r7, r6, r9
	ldr r9, [r7]
BinaryMInstruction::output() 
	mul r7, r10, r9
	ldr r10, [fp, #-8]
	ldr r9, =4
BinaryMInstruction::output() 
	mul r6, r10, r9
	ldr r10, addr__0
BinaryMInstruction::output() 
	add r9, r6, r10
	ldr r10, [r9]
BinaryMInstruction::output() 
	mul r9, r7, r10
BinaryMInstruction::output() 
	add r10, r8, r9
	str r10, [fp, #-4]
	ldr r10, [fp, #-16]
	ldr r9, [fp, #-8]
	ldr r8, =10
BinaryMInstruction::output() 
	mul r7, r10, r8
BinaryMInstruction::output() 
	add r10, r7, r9
	ldr r9, =4
BinaryMInstruction::output() 
	mul r8, r10, r9
	ldr r10, addr_p_0
BinaryMInstruction::output() 
	add r9, r8, r10
	ldr r10, [r9]
	ldr r9, =0
	cmp r9, r10
	moveq r10, #1
	movne r10, #0
	beq .L92
	b .L104
.L55:
	ldr r10, [fp, #-16]
BinaryMInstruction::output() 
	add r9, r10, #1
	str r9, [fp, #-16]
	b .L41
.L58:
.L59:
	b .L55
.L60:
.L92:
	ldr r10, [fp, #-4]
	ldr r9, [fp, #-16]
	ldr r8, [fp, #-8]
	ldr r7, =10
BinaryMInstruction::output() 
	mul r6, r9, r7
BinaryMInstruction::output() 
	add r9, r6, r8
	ldr r8, =4
BinaryMInstruction::output() 
	mul r7, r9, r8
	ldr r9, addr_p_0
BinaryMInstruction::output() 
	add r8, r7, r9
BinaryMInstruction::output() 
	add r9, fp, r8
	str r10, [r9]
	b .L93
.L93:
	ldr r10, [fp, #-12]
BinaryMInstruction::output() 
	add r9, r10, #1
	str r9, [fp, #-12]
	b .L53
.L94:
	ldr r10, [fp, #-4]
	ldr r9, [fp, #-16]
	ldr r8, [fp, #-8]
	ldr r7, =10
BinaryMInstruction::output() 
	mul r6, r9, r7
BinaryMInstruction::output() 
	add r9, r6, r8
	ldr r8, =4
BinaryMInstruction::output() 
	mul r7, r9, r8
	ldr r9, addr_p_0
BinaryMInstruction::output() 
	add r8, r7, r9
	ldr r9, [r8]
	cmp r10, r9
	movlt r10, #1
	movge r10, #0
	blt .L92
	b .L116
.L103:
.L104:
	b .L94
.L105:
.L115:
.L116:
	b .L93
.L117:
.Lmain_END:
BinaryMInstruction::output() 
	add sp, sp, #24
	pop {r6, r7, r8, r9, r10, fp, lr}
	bx  lr

addr_a_0:
	.word a
addr_dp_0:
	.word dp
qemu: uncaught target signal 11 (Segmentation fault) - core dumped
timeout: 监视的命令已核心转储
Segmentation fault
