

























typecheck fin
program
    FunctionDefine function name: @main, type: i32
        FuncDefParamsNode NULL
        CompoundStmt
            DeclStmt
            DefNode	Variable	Array
                Id	name: a	scope: 2	type: int array	size: 100
                    ArrayDimensions
                    ArrDim
                        IntegerLiteral	value: 5	type: i32
                        IntegerLiteral	value: 5	type: i32
                ArrValNode	Variable	ValList
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 1	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 1	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 1	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 1	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 1	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 2	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 2	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 2	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 2	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 2	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 3	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 3	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 3	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 3	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 3	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 4	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 4	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 4	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 4	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 4	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 5	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 5	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 5	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 5	type: i32
                    ArrValNode	Variable	Expr
                        IntegerLiteral	value: 5	type: i32
            DeclStmt
            DefNode	Variable	NonArray
                Id	name: m	scope: 2	type: i32	size: 4
                This variable/constant is not assigned
            DefNode	Variable	NonArray
                Id	name: n	scope: 2	type: i32	size: 4
                This variable/constant is not assigned
            DefNode	Variable	NonArray
                Id	name: i	scope: 2	type: i32	size: 4
                This variable/constant is not assigned
            DefNode	Variable	NonArray
                Id	name: j	scope: 2	type: i32	size: 4
                This variable/constant is not assigned
            AssignStmt
                Id	name: m	scope: 2	type: i32	size: 4
                IntegerLiteral	value: 2	type: i32
            AssignStmt
                Id	name: n	scope: 2	type: i32	size: 4
                IntegerLiteral	value: 3	type: i32
            AssignStmt
                Id	name: j	scope: 2	type: i32	size: 4
                IntegerLiteral	value: 0	type: i32
            WhileStmt
                BinaryExpr	op: less     type:i1
                    Id	name: j	scope: 2	type: i32	size: 4
                    IntegerLiteral	value: 5	type: i32
                CompoundStmt
                    AssignStmt
                        Id	name: i	scope: 2	type: i32	size: 4
                        Id	name: a	scope: 2	type: int array	size: 100
                            ArrayDimensions
                            ArrDim
                                BinaryExpr	op: sub     type:i32
                                    Id	name: m	scope: 2	type: i32	size: 4
                                    IntegerLiteral	value: 1	type: i32
                                Id	name: j	scope: 2	type: i32	size: 4
                    AssignStmt
                        Id	name: a	scope: 2	type: int array	size: 100
                            ArrayDimensions
                            ArrDim
                                BinaryExpr	op: sub     type:i32
                                    Id	name: m	scope: 2	type: i32	size: 4
                                    IntegerLiteral	value: 1	type: i32
                                Id	name: j	scope: 2	type: i32	size: 4
                        Id	name: a	scope: 2	type: int array	size: 100
                            ArrayDimensions
                            ArrDim
                                BinaryExpr	op: sub     type:i32
                                    Id	name: n	scope: 2	type: i32	size: 4
                                    IntegerLiteral	value: 1	type: i32
                                Id	name: j	scope: 2	type: i32	size: 4
                    AssignStmt
                        Id	name: a	scope: 2	type: int array	size: 100
                            ArrayDimensions
                            ArrDim
                                BinaryExpr	op: sub     type:i32
                                    Id	name: n	scope: 2	type: i32	size: 4
                                    IntegerLiteral	value: 1	type: i32
                                Id	name: j	scope: 2	type: i32	size: 4
                        Id	name: i	scope: 2	type: i32	size: 4
                    AssignStmt
                        Id	name: j	scope: 2	type: i32	size: 4
                        BinaryExpr	op: add     type:i32
                            Id	name: j	scope: 2	type: i32	size: 4
                            IntegerLiteral	value: 1	type: i32
            ReturnStmt
                Id	name: a	scope: 2	type: int array	size: 100
                    ArrayDimensions
                    ArrDim
                        IntegerLiteral	value: 2	type: i32
                        IntegerLiteral	value: 0	type: i32
DeclStmt::genCode
DeclStmt::genCode
AssignStmt::genCode
AssignStmt::genCode
AssignStmt::genCode
WhileStmt::genCode
AssignStmt::genCode
Id::ArrgenCode
AssignStmt::genCode
Id::ArrgenCode
AssignStmt::genCode
AssignStmt::genCode
ReturnStmt::genCode
Id::ArrgenCode
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
CmpInstruction::genMachineCode
CmpInstruction::genMachineCode end
CondBrInstruction::genMachineCode
CondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode7
LoadInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode7
LoadInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode7
LoadInstruction::genMachineCode end
RetInstruction::genMachineCode
RetInstruction::genMachineCode end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
	.arch armv8-a
	.fpu vfpv3-d16
	.arch_extension crc
	.arm
	.text
	.global main
	.type main , %function
main:
	push {r6, r7, r8, r9, r10, fp, lr}
	mov fp, sp
BinaryMInstruction::output() 
	sub sp, sp, #116
.L6:
	ldr r10, =0
BinaryMInstruction::output() 
	add r9, r10, #-116
	ldr r10, =1
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =4
BinaryMInstruction::output() 
	add r9, r10, #-116
	ldr r10, =1
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =8
BinaryMInstruction::output() 
	add r9, r10, #-116
	ldr r10, =1
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =12
BinaryMInstruction::output() 
	add r9, r10, #-116
	ldr r10, =1
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =16
BinaryMInstruction::output() 
	add r9, r10, #-116
	ldr r10, =1
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =20
BinaryMInstruction::output() 
	add r9, r10, #-116
	ldr r10, =2
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =24
BinaryMInstruction::output() 
	add r9, r10, #-116
	ldr r10, =2
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =28
BinaryMInstruction::output() 
	add r9, r10, #-116
	ldr r10, =2
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =32
BinaryMInstruction::output() 
	add r9, r10, #-116
	ldr r10, =2
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =36
BinaryMInstruction::output() 
	add r9, r10, #-116
	ldr r10, =2
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =40
BinaryMInstruction::output() 
	add r9, r10, #-116
	ldr r10, =3
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =44
BinaryMInstruction::output() 
	add r9, r10, #-116
	ldr r10, =3
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =48
BinaryMInstruction::output() 
	add r9, r10, #-116
	ldr r10, =3
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =52
BinaryMInstruction::output() 
	add r9, r10, #-116
	ldr r10, =3
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =56
BinaryMInstruction::output() 
	add r9, r10, #-116
	ldr r10, =3
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =60
BinaryMInstruction::output() 
	add r9, r10, #-116
	ldr r10, =4
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =64
BinaryMInstruction::output() 
	add r9, r10, #-116
	ldr r10, =4
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =68
BinaryMInstruction::output() 
	add r9, r10, #-116
	ldr r10, =4
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =72
BinaryMInstruction::output() 
	add r9, r10, #-116
	ldr r10, =4
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =76
BinaryMInstruction::output() 
	add r9, r10, #-116
	ldr r10, =4
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =80
BinaryMInstruction::output() 
	add r9, r10, #-116
	ldr r10, =5
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =84
BinaryMInstruction::output() 
	add r9, r10, #-116
	ldr r10, =5
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =88
BinaryMInstruction::output() 
	add r9, r10, #-116
	ldr r10, =5
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =92
BinaryMInstruction::output() 
	add r9, r10, #-116
	ldr r10, =5
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =96
BinaryMInstruction::output() 
	add r9, r10, #-116
	ldr r10, =5
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, =2
	str r10, [fp, #-16]
	ldr r10, =3
	str r10, [fp, #-12]
	ldr r10, =0
	str r10, [fp, #-4]
	b .L37
.L37:
	ldr r10, [fp, #-4]
	ldr r9, =5
	cmp r10, r9
	movlt r10, #1
	movge r10, #0
	blt .L38
	b .L42
.L38:
	ldr r10, [fp, #-16]
BinaryMInstruction::output() 
	sub r9, r10, #1
	ldr r10, [fp, #-4]
	ldr r8, =5
BinaryMInstruction::output() 
	mul r7, r9, r8
BinaryMInstruction::output() 
	add r9, r7, r10
	ldr r10, =4
BinaryMInstruction::output() 
	mul r8, r9, r10
BinaryMInstruction::output() 
	add r10, r8, #-116
BinaryMInstruction::output() 
	add r9, fp, r10
	ldr r10, [r9]
	str r10, [fp, #-8]
	ldr r10, [fp, #-12]
BinaryMInstruction::output() 
	sub r9, r10, #1
	ldr r10, [fp, #-4]
	ldr r8, =5
BinaryMInstruction::output() 
	mul r7, r9, r8
BinaryMInstruction::output() 
	add r9, r7, r10
	ldr r10, =4
BinaryMInstruction::output() 
	mul r8, r9, r10
BinaryMInstruction::output() 
	add r10, r8, #-116
BinaryMInstruction::output() 
	add r9, fp, r10
	ldr r10, [r9]
	ldr r9, [fp, #-16]
BinaryMInstruction::output() 
	sub r8, r9, #1
	ldr r9, [fp, #-4]
	ldr r7, =5
BinaryMInstruction::output() 
	mul r6, r8, r7
BinaryMInstruction::output() 
	add r8, r6, r9
	ldr r9, =4
BinaryMInstruction::output() 
	mul r7, r8, r9
BinaryMInstruction::output() 
	add r9, r7, #-116
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, [fp, #-8]
	ldr r9, [fp, #-12]
BinaryMInstruction::output() 
	sub r8, r9, #1
	ldr r9, [fp, #-4]
	ldr r7, =5
BinaryMInstruction::output() 
	mul r6, r8, r7
BinaryMInstruction::output() 
	add r8, r6, r9
	ldr r9, =4
BinaryMInstruction::output() 
	mul r7, r8, r9
BinaryMInstruction::output() 
	add r9, r7, #-116
BinaryMInstruction::output() 
	add r8, fp, r9
	str r10, [r8]
	ldr r10, [fp, #-4]
BinaryMInstruction::output() 
	add r9, r10, #1
	str r9, [fp, #-4]
	b .L37
.L39:
	ldr r10, =2
	ldr r9, =5
BinaryMInstruction::output() 
	mul r8, r10, r9
BinaryMInstruction::output() 
	add r10, r8, #0
	ldr r9, =4
BinaryMInstruction::output() 
	mul r8, r10, r9
BinaryMInstruction::output() 
	add r10, r8, #-116
BinaryMInstruction::output() 
	add r9, fp, r10
	ldr r10, [r9]
	mov r0, r10
	b .Lmain_END
.L41:
.L42:
	b .L39
.L43:
.Lmain_END:
BinaryMInstruction::output() 
	add sp, sp, #116
	pop {r6, r7, r8, r9, r10, fp, lr}
	bx  lr

