typecheck fin
program
    FunctionDefine function name: @get_next, type: void
        FuncDefParamsNode
            Id	name: %str	scope: 1	type: int array	size: 4
                ArrayDimensions
                ArrDim
                    IntegerLiteral	value: -1	type: i32
            Id	name: %next	scope: 1	type: int array	size: 4
                ArrayDimensions
                ArrDim
                    IntegerLiteral	value: -1	type: i32
        CompoundStmt
            AssignStmt
                Id	name: %next	scope: 1	type: int array	size: 4
                    ArrayDimensions
                    ArrDim
                        IntegerLiteral	value: 0	type: i32
                IntegerLiteral	value: -1	type: i32
            DeclStmt
            DefNode	Variable	NonArray
                Id	name: i	scope: 2	type: i32	size: 4
                IntegerLiteral	value: 0	type: i32
            DefNode	Variable	NonArray
                Id	name: j	scope: 2	type: i32	size: 4
                IntegerLiteral	value: -1	type: i32
            WhileStmt
                BinaryExpr	op: neq     type:i1
                    IntegerLiteral	value: 0	type: i32
                    Id	name: %str	scope: 1	type: int array	size: 4
                        ArrayDimensions
                        ArrDim
                            Id	name: i	scope: 2	type: i32	size: 4
                CompoundStmt
                    IfElseStmt
                        BinaryExpr	op: or     type:i1
                            BinaryExpr	op: eq     type:i1
                                Id	name: j	scope: 2	type: i32	size: 4
                                IntegerLiteral	value: -1	type: i32
                            BinaryExpr	op: eq     type:i1
                                Id	name: %str	scope: 1	type: int array	size: 4
                                    ArrayDimensions
                                    ArrDim
                                        Id	name: i	scope: 2	type: i32	size: 4
                                Id	name: %str	scope: 1	type: int array	size: 4
                                    ArrayDimensions
                                    ArrDim
                                        Id	name: j	scope: 2	type: i32	size: 4
                        CompoundStmt
                            AssignStmt
                                Id	name: j	scope: 2	type: i32	size: 4
                                BinaryExpr	op: add     type:i32
                                    Id	name: j	scope: 2	type: i32	size: 4
                                    IntegerLiteral	value: 1	type: i32
                            AssignStmt
                                Id	name: i	scope: 2	type: i32	size: 4
                                BinaryExpr	op: add     type:i32
                                    Id	name: i	scope: 2	type: i32	size: 4
                                    IntegerLiteral	value: 1	type: i32
                            AssignStmt
                                Id	name: %next	scope: 1	type: int array	size: 4
                                    ArrayDimensions
                                    ArrDim
                                        Id	name: i	scope: 2	type: i32	size: 4
                                Id	name: j	scope: 2	type: i32	size: 4
                        AssignStmt
                            Id	name: j	scope: 2	type: i32	size: 4
                            Id	name: %next	scope: 1	type: int array	size: 4
                                ArrayDimensions
                                ArrDim
                                    Id	name: j	scope: 2	type: i32	size: 4
    FunctionDefine function name: @KMP, type: i32
        FuncDefParamsNode
            Id	name: %dst	scope: 1	type: int array	size: 4
                ArrayDimensions
                ArrDim
                    IntegerLiteral	value: -1	type: i32
            Id	name: %src	scope: 1	type: int array	size: 4
                ArrayDimensions
                ArrDim
                    IntegerLiteral	value: -1	type: i32
        CompoundStmt
            DeclStmt
            DefNode	Variable	Array
                Id	name: next	scope: 2	type: int array	size: 16384
                    ArrayDimensions
                    ArrDim
                        IntegerLiteral	value: 4096	type: i32
                This variable/constant is not assigned
            ExprStmtNode
                FuncCallNode	funcName: @get_next	 funcType: void	scope: 0
                    FuncCallParamsNode
                        Id	name: %dst	scope: 1	type: int array	size: 4
                        Id	name: next	scope: 2	type: int array	size: 16384
            DeclStmt
            DefNode	Variable	NonArray
                Id	name: i	scope: 2	type: i32	size: 4
                IntegerLiteral	value: 0	type: i32
            DefNode	Variable	NonArray
                Id	name: j	scope: 2	type: i32	size: 4
                IntegerLiteral	value: 0	type: i32
            WhileStmt
                BinaryExpr	op: neq     type:i1
                    IntegerLiteral	value: 0	type: i32
                    Id	name: %src	scope: 1	type: int array	size: 4
                        ArrayDimensions
                        ArrDim
                            Id	name: j	scope: 2	type: i32	size: 4
                CompoundStmt
                    IfElseStmt
                        BinaryExpr	op: eq     type:i1
                            Id	name: %dst	scope: 1	type: int array	size: 4
                                ArrayDimensions
                                ArrDim
                                    Id	name: i	scope: 2	type: i32	size: 4
                            Id	name: %src	scope: 1	type: int array	size: 4
                                ArrayDimensions
                                ArrDim
                                    Id	name: j	scope: 2	type: i32	size: 4
                        CompoundStmt
                            AssignStmt
                                Id	name: i	scope: 2	type: i32	size: 4
                                BinaryExpr	op: add     type:i32
                                    Id	name: i	scope: 2	type: i32	size: 4
                                    IntegerLiteral	value: 1	type: i32
                            AssignStmt
                                Id	name: j	scope: 2	type: i32	size: 4
                                BinaryExpr	op: add     type:i32
                                    Id	name: j	scope: 2	type: i32	size: 4
                                    IntegerLiteral	value: 1	type: i32
                            IfStmt
                                SingleExpr	op: not     type:i1
                                    Id	name: %dst	scope: 1	type: int array	size: 4
                                        ArrayDimensions
                                        ArrDim
                                            Id	name: i	scope: 2	type: i32	size: 4
                                CompoundStmt
                                    ReturnStmt
                                        Id	name: j	scope: 2	type: i32	size: 4
                        CompoundStmt
                            AssignStmt
                                Id	name: i	scope: 2	type: i32	size: 4
                                Id	name: next	scope: 2	type: int array	size: 16384
                                    ArrayDimensions
                                    ArrDim
                                        Id	name: i	scope: 2	type: i32	size: 4
                            IfStmt
                                BinaryExpr	op: eq     type:i1
                                    Id	name: i	scope: 2	type: i32	size: 4
                                    IntegerLiteral	value: -1	type: i32
                                CompoundStmt
                                    AssignStmt
                                        Id	name: i	scope: 2	type: i32	size: 4
                                        BinaryExpr	op: add     type:i32
                                            Id	name: i	scope: 2	type: i32	size: 4
                                            IntegerLiteral	value: 1	type: i32
                                    AssignStmt
                                        Id	name: j	scope: 2	type: i32	size: 4
                                        BinaryExpr	op: add     type:i32
                                            Id	name: j	scope: 2	type: i32	size: 4
                                            IntegerLiteral	value: 1	type: i32
            ReturnStmt
                IntegerLiteral	value: -1	type: i32
    FunctionDefine function name: @read_str, type: i32
        FuncDefParamsNode
            Id	name: %buf	scope: 1	type: int array	size: 4
                ArrayDimensions
                ArrDim
                    IntegerLiteral	value: -1	type: i32
        CompoundStmt
            DeclStmt
            DefNode	Variable	NonArray
                Id	name: i	scope: 2	type: i32	size: 4
                IntegerLiteral	value: 0	type: i32
            WhileStmt
                BinaryExpr	op: neq     type:i1
                    IntegerLiteral	value: 0	type: i32
                    IntegerLiteral	value: 1	type: i32
                CompoundStmt
                    AssignStmt
                        Id	name: %buf	scope: 1	type: int array	size: 4
                            ArrayDimensions
                            ArrDim
                                Id	name: i	scope: 2	type: i32	size: 4
                        FuncCallNode	funcName: @getch	 funcType: i32	scope: 0
                            FuncCallParamsNode NULL
                    IfStmt
                        BinaryExpr	op: eq     type:i1
                            Id	name: %buf	scope: 1	type: int array	size: 4
                                ArrayDimensions
                                ArrDim
                                    Id	name: i	scope: 2	type: i32	size: 4
                            IntegerLiteral	value: 10	type: i32
                        BreakStmt
                    AssignStmt
                        Id	name: i	scope: 2	type: i32	size: 4
                        BinaryExpr	op: add     type:i32
                            Id	name: i	scope: 2	type: i32	size: 4
                            IntegerLiteral	value: 1	type: i32
            AssignStmt
                Id	name: %buf	scope: 1	type: int array	size: 4
                    ArrayDimensions
                    ArrDim
                        Id	name: i	scope: 2	type: i32	size: 4
                IntegerLiteral	value: 0	type: i32
            ReturnStmt
                Id	name: i	scope: 2	type: i32	size: 4
    FunctionDefine function name: @main, type: i32
        FuncDefParamsNode NULL
        CompoundStmt
            DeclStmt
            DefNode	Variable	Array
                Id	name: dst	scope: 2	type: int array	size: 16384
                    ArrayDimensions
                    ArrDim
                        IntegerLiteral	value: 4096	type: i32
                This variable/constant is not assigned
            DefNode	Variable	Array
                Id	name: src	scope: 2	type: int array	size: 16384
                    ArrayDimensions
                    ArrDim
                        IntegerLiteral	value: 4096	type: i32
                This variable/constant is not assigned
            ExprStmtNode
                FuncCallNode	funcName: @read_str	 funcType: i32	scope: 0
                    FuncCallParamsNode
                        Id	name: dst	scope: 2	type: int array	size: 16384
            ExprStmtNode
                FuncCallNode	funcName: @read_str	 funcType: i32	scope: 0
                    FuncCallParamsNode
                        Id	name: src	scope: 2	type: int array	size: 16384
            ExprStmtNode
                FuncCallNode	funcName: @putint	 funcType: void	scope: 0
                    FuncCallParamsNode
                        FuncCallNode	funcName: @KMP	 funcType: i32	scope: 0
                            FuncCallParamsNode
                                Id	name: dst	scope: 2	type: int array	size: 16384
                                Id	name: src	scope: 2	type: int array	size: 16384
            ExprStmtNode
                FuncCallNode	funcName: @putch	 funcType: void	scope: 0
                    FuncCallParamsNode
                        IntegerLiteral	value: 10	type: i32
            ReturnStmt
                IntegerLiteral	value: 0	type: i32
AssignStmt::genCode
DeclStmt::genCode
new StoreInstruction src:-118356320
new StoreInstruction src:-118356320
WhileStmt::genCode
Id::ArrgenCode
Id::ArrgenCode
Id::ArrgenCode
AssignStmt::genCode
AssignStmt::genCode
AssignStmt::genCode
AssignStmt::genCode
Id::ArrgenCode
ReturnStmt::genCode
DeclStmt::genCode
Id::ArrgenCode
Id::ArrgenCode
callParams[0]->getexprkind() == ExprNode::CONSTANT  is 0
callParams[1]->getexprkind() == ExprNode::CONSTANT  is 0
DeclStmt::genCode
new StoreInstruction src:-118356320
new StoreInstruction src:-118356320
WhileStmt::genCode
Id::ArrgenCode
Id::ArrgenCode
Id::ArrgenCode
AssignStmt::genCode
AssignStmt::genCode
Id::ArrgenCode
ReturnStmt::genCode
AssignStmt::genCode
Id::ArrgenCode
AssignStmt::genCode
AssignStmt::genCode
ReturnStmt::genCode
DeclStmt::genCode
new StoreInstruction src:-118356320
WhileStmt::genCode
AssignStmt::genCode
Id::ArrgenCode
AssignStmt::genCode
AssignStmt::genCode
ReturnStmt::genCode
DeclStmt::genCode
Id::ArrgenCode
callParams[0]->getexprkind() == ExprNode::CONSTANT  is 0
Id::ArrgenCode
callParams[0]->getexprkind() == ExprNode::CONSTANT  is 0
Id::ArrgenCode
Id::ArrgenCode
callParams[0]->getexprkind() == ExprNode::CONSTANT  is 0
callParams[1]->getexprkind() == ExprNode::CONSTANT  is 0
callParams[0]->getexprkind() == ExprNode::CONSTANT  is 0
callParams[0]->getexprkind() == ExprNode::CONSTANT  is 1
ReturnStmt::genCode
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode1
StoreInstruction::genMachineCode  end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode1
StoreInstruction::genMachineCode  end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
CmpInstruction::genMachineCode
CmpInstruction::genMachineCode end
CondBrInstruction::genMachineCode
CondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
CmpInstruction::genMachineCode
CmpInstruction::genMachineCode end
CondBrInstruction::genMachineCode
CondBrInstruction::genMachineCode end
RetInstruction::genMachineCode
RetInstruction::genMachineCode end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
CmpInstruction::genMachineCode
CmpInstruction::genMachineCode end
CondBrInstruction::genMachineCode
CondBrInstruction::genMachineCode end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode1
StoreInstruction::genMachineCode  end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode1
StoreInstruction::genMachineCode  end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
CallInstruction::genMachineCode
CallInstruction::genMachineCode int
CallInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
CmpInstruction::genMachineCode
CmpInstruction::genMachineCode end
CondBrInstruction::genMachineCode
CondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
CmpInstruction::genMachineCode
CmpInstruction::genMachineCode end
CondBrInstruction::genMachineCode
CondBrInstruction::genMachineCode end
RetInstruction::genMachineCode
RetInstruction::genMachineCode end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
CmpInstruction::genMachineCode
CmpInstruction::genMachineCode end
CondBrInstruction::genMachineCode
CondBrInstruction::genMachineCode end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode7
LoadInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
CmpInstruction::genMachineCode
CmpInstruction::genMachineCode end
CondBrInstruction::genMachineCode
CondBrInstruction::genMachineCode end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
RetInstruction::genMachineCode
RetInstruction::genMachineCode end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode1
StoreInstruction::genMachineCode  end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
CmpInstruction::genMachineCode
CmpInstruction::genMachineCode end
CondBrInstruction::genMachineCode
CondBrInstruction::genMachineCode end
CallInstruction::genMachineCode
CallInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
CmpInstruction::genMachineCode
CmpInstruction::genMachineCode end
CondBrInstruction::genMachineCode
CondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
RetInstruction::genMachineCode
RetInstruction::genMachineCode end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
CallInstruction::genMachineCode
CallInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
CallInstruction::genMachineCode
CallInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
CallInstruction::genMachineCode
CallInstruction::genMachineCode end
CallInstruction::genMachineCode
CallInstruction::genMachineCode int
CallInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
CallInstruction::genMachineCode
CallInstruction::genMachineCode int
CallInstruction::genMachineCode end
RetInstruction::genMachineCode
RetInstruction::genMachineCode end
	.arch armv8-a
	.fpu vfpv3-d16
	.arch_extension crc
	.arm
	.text
	.global get_next
	.type get_next , %function
get_next:
	push {r6, r7, r8, r9, r10, fp, lr}
	mov fp, sp
BinaryMInstruction::output() 
	sub sp, sp, #16
.L29:
	str r0, [fp, #-16]
	str r1, [fp, #-12]
	ldr r10, [fp, #-12]
	ldr r9, =0
	ldr r8, =4
BinaryMInstruction::output() 
	mul r7, r9, r8
BinaryMInstruction::output() 
	add r9, r7, r10
	ldr r10, =-1
	str r10, [r9]
	ldr r10, =0
	str r10, [fp, #-8]
	ldr r10, =-1
	str r10, [fp, #-4]
	b .L37
.L37:
	ldr r10, [fp, #-8]
	ldr r9, [fp, #-16]
	ldr r8, =4
BinaryMInstruction::output() 
	mul r7, r10, r8
BinaryMInstruction::output() 
	add r10, r7, r9
	ldr r9, [r10]
	ldr r10, =0
	cmp r10, r9
	movne r10, #1
	moveq r10, #0
	bne .L38
	b .L46
.L38:
	ldr r10, [fp, #-4]
	ldr r9, =-1
	cmp r10, r9
	moveq r10, #1
	movne r10, #0
	beq .L48
	b .L54
.L39:
	b .Lget_next_END
.L45:
.L46:
	b .L39
.L47:
.L48:
	ldr r10, [fp, #-4]
BinaryMInstruction::output() 
	add r9, r10, #1
	str r9, [fp, #-4]
	ldr r10, [fp, #-8]
BinaryMInstruction::output() 
	add r9, r10, #1
	str r9, [fp, #-8]
	ldr r10, [fp, #-4]
	ldr r9, [fp, #-8]
	ldr r8, [fp, #-12]
	ldr r7, =4
BinaryMInstruction::output() 
	mul r6, r9, r7
BinaryMInstruction::output() 
	add r9, r6, r8
	str r10, [r9]
	b .L49
.L49:
	b .L37
.L50:
	ldr r10, [fp, #-4]
	ldr r9, [fp, #-12]
	ldr r8, =4
BinaryMInstruction::output() 
	mul r7, r10, r8
BinaryMInstruction::output() 
	add r10, r7, r9
	ldr r9, [r10]
	str r9, [fp, #-4]
	b .L49
.L51:
	ldr r10, [fp, #-8]
	ldr r9, [fp, #-16]
	ldr r8, =4
BinaryMInstruction::output() 
	mul r7, r10, r8
BinaryMInstruction::output() 
	add r10, r7, r9
	ldr r9, [r10]
	ldr r10, [fp, #-4]
	ldr r8, [fp, #-16]
	ldr r7, =4
BinaryMInstruction::output() 
	mul r6, r10, r7
BinaryMInstruction::output() 
	add r10, r6, r8
	ldr r8, [r10]
	cmp r9, r8
	moveq r10, #1
	movne r10, #0
	beq .L48
	b .L67
.L53:
.L54:
	b .L51
.L55:
.L66:
.L67:
	b .L50
.L68:
.Lget_next_END:
BinaryMInstruction::output() 
	add sp, sp, #16
	pop {r6, r7, r8, r9, r10, fp, lr}
	bx  lr

	.global KMP
	.type KMP , %function
KMP:
	push {r6, r7, r8, r9, r10, fp, lr}
	mov fp, sp
BinaryMInstruction::output() 
	sub sp, sp, #16400
.L81:
	str r0, [fp, #-16400]
	str r1, [fp, #-16396]
	ldr r10, [fp, #-16400]
	ldr r9, =0
BinaryMInstruction::output() 
	add r8, r9, r10
	ldr r10, =0
BinaryMInstruction::output() 
	add r9, r10, #-16392
BinaryMInstruction::output() 
	add r10, fp, r9
	mov r1, r10
	mov r0, r8
	bl  get_next
	ldr r10, =0
	str r10, [fp, #-8]
	ldr r10, =0
	str r10, [fp, #-4]
	b .L92
.L92:
	ldr r10, [fp, #-4]
	ldr r9, [fp, #-16396]
	ldr r8, =4
BinaryMInstruction::output() 
	mul r7, r10, r8
BinaryMInstruction::output() 
	add r10, r7, r9
	ldr r9, [r10]
	ldr r10, =0
	cmp r10, r9
	movne r10, #1
	moveq r10, #0
	bne .L93
	b .L101
.L93:
	ldr r10, [fp, #-8]
	ldr r9, [fp, #-16400]
	ldr r8, =4
BinaryMInstruction::output() 
	mul r7, r10, r8
BinaryMInstruction::output() 
	add r10, r7, r9
	ldr r9, [r10]
	ldr r10, [fp, #-4]
	ldr r8, [fp, #-16396]
	ldr r7, =4
BinaryMInstruction::output() 
	mul r6, r10, r7
BinaryMInstruction::output() 
	add r10, r6, r8
	ldr r8, [r10]
	cmp r9, r8
	moveq r10, #1
	movne r10, #0
	beq .L103
	b .L117
.L94:
	ldr r10, =-1
	mov r0, r10
	b .LKMP_END
.L100:
.L101:
	b .L94
.L102:
.L103:
	ldr r10, [fp, #-8]
BinaryMInstruction::output() 
	add r9, r10, #1
	str r9, [fp, #-8]
	ldr r10, [fp, #-4]
BinaryMInstruction::output() 
	add r9, r10, #1
	str r9, [fp, #-4]
	ldr r10, [fp, #-8]
	ldr r9, [fp, #-16400]
	ldr r8, =4
BinaryMInstruction::output() 
	mul r7, r10, r8
BinaryMInstruction::output() 
	add r10, r7, r9
	ldr r9, [r10]
	ldr r10, =0
	cmp r10, r9
	moveq r10, #1
	movne r10, #0
	beq .L121
	b .L129
.L104:
	b .L92
.L105:
	ldr r10, [fp, #-8]
	ldr r9, =4
BinaryMInstruction::output() 
	mul r8, r10, r9
BinaryMInstruction::output() 
	add r10, r8, #-16392
BinaryMInstruction::output() 
	add r9, fp, r10
	ldr r10, [r9]
	str r10, [fp, #-8]
	ldr r10, [fp, #-8]
	ldr r9, =-1
	cmp r10, r9
	moveq r10, #1
	movne r10, #0
	beq .L136
	b .L140
.L116:
.L117:
	b .L105
.L118:
.L121:
	ldr r10, [fp, #-4]
	mov r0, r10
	b .LKMP_END
.L122:
	b .L104
.L128:
.L129:
	b .L122
.L130:
.L136:
	ldr r10, [fp, #-8]
BinaryMInstruction::output() 
	add r9, r10, #1
	str r9, [fp, #-8]
	ldr r10, [fp, #-4]
BinaryMInstruction::output() 
	add r9, r10, #1
	str r9, [fp, #-4]
	b .L137
.L137:
	b .L104
.L139:
.L140:
	b .L137
.L141:
.LKMP_END:
BinaryMInstruction::output() 
	add sp, sp, #16400
	pop {r6, r7, r8, r9, r10, fp, lr}
	bx  lr

	.global read_str
	.type read_str , %function
read_str:
	push {r6, r7, r8, r9, r10, fp, lr}
	mov fp, sp
BinaryMInstruction::output() 
	sub sp, sp, #8
.L144:
	str r0, [fp, #-8]
	ldr r10, =0
	str r10, [fp, #-4]
	b .L147
.L147:
	ldr r10, =0
	ldr r9, =1
	cmp r10, r9
	movne r10, #1
	moveq r10, #0
	bne .L148
	b .L151
.L148:
	bl  getch
	mov r10, r0
	ldr r9, [fp, #-4]
	ldr r8, [fp, #-8]
	ldr r7, =4
BinaryMInstruction::output() 
	mul r6, r9, r7
BinaryMInstruction::output() 
	add r9, r6, r8
	str r10, [r9]
	ldr r10, [fp, #-4]
	ldr r9, [fp, #-8]
	ldr r8, =4
BinaryMInstruction::output() 
	mul r7, r10, r8
BinaryMInstruction::output() 
	add r10, r7, r9
	ldr r9, [r10]
	ldr r10, =10
	cmp r9, r10
	moveq r10, #1
	movne r10, #0
	beq .L157
	b .L165
.L149:
	ldr r10, [fp, #-4]
	ldr r9, [fp, #-8]
	ldr r8, =4
BinaryMInstruction::output() 
	mul r7, r10, r8
BinaryMInstruction::output() 
	add r10, r7, r9
	ldr r9, =0
	str r9, [r10]
	ldr r10, [fp, #-4]
	mov r0, r10
	b .Lread_str_END
.L150:
.L151:
	b .L149
.L152:
.L157:
	b .L149
.L158:
	ldr r10, [fp, #-4]
BinaryMInstruction::output() 
	add r9, r10, #1
	str r9, [fp, #-4]
	b .L147
.L164:
.L165:
	b .L158
.L166:
.L167:
	b .L158
.Lread_str_END:
BinaryMInstruction::output() 
	add sp, sp, #8
	pop {r6, r7, r8, r9, r10, fp, lr}
	bx  lr

	.global main
	.type main , %function
main:
	push {r8, r9, r10, fp, lr}
	mov fp, sp
BinaryMInstruction::output() 
	sub sp, sp, #32768
.L174:
	ldr r10, =0
BinaryMInstruction::output() 
	add r9, r10, #-32768
BinaryMInstruction::output() 
	add r10, fp, r9
	mov r0, r10
	bl  read_str
	mov r10, r0
	ldr r10, =0
BinaryMInstruction::output() 
	add r9, r10, #-16384
BinaryMInstruction::output() 
	add r10, fp, r9
	mov r0, r10
	bl  read_str
	mov r10, r0
	ldr r10, =0
BinaryMInstruction::output() 
	add r9, r10, #-32768
	ldr r10, =0
BinaryMInstruction::output() 
	add r8, r10, #-16384
BinaryMInstruction::output() 
	add r10, fp, r8
	mov r1, r10
BinaryMInstruction::output() 
	add r10, fp, r9
	mov r0, r10
	bl  KMP
	mov r10, r0
	mov r0, r10
	bl  putint
	ldr r10, =10
	mov r0, r10
	bl  putch
	ldr r10, =0
	mov r0, r10
	b .Lmain_END
.Lmain_END:
BinaryMInstruction::output() 
	add sp, sp, #32768
	pop {r8, r9, r10, fp, lr}
	bx  lr

test/level2-4/091_kmp.s: Assembler messages:
test/level2-4/091_kmp.s:116: 错误： invalid constant (4010) after fixup
test/level2-4/091_kmp.s:118: 错误： bad immediate value for offset (16400)
test/level2-4/091_kmp.s:119: 错误： bad immediate value for offset (16396)
test/level2-4/091_kmp.s:120: 错误： bad immediate value for offset (16400)
test/level2-4/091_kmp.s:124: 错误： invalid constant (ffffffffffffbff8) after fixup
test/level2-4/091_kmp.s:136: 错误： bad immediate value for offset (16396)
test/level2-4/091_kmp.s:149: 错误： bad immediate value for offset (16400)
test/level2-4/091_kmp.s:155: 错误： bad immediate value for offset (16396)
test/level2-4/091_kmp.s:181: 错误： bad immediate value for offset (16400)
test/level2-4/091_kmp.s:198: 错误： invalid constant (ffffffffffffbff8) after fixup
test/level2-4/091_kmp.s:238: 错误： invalid constant (4010) after fixup
