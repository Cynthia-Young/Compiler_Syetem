typecheck fin
program
    FunctionDefine function name: @maxSubArray, type: i32
        FuncDefParamsNode
            Id	name: %nums	scope: 1	type: int array	size: 4
                ArrayDimensions
                ArrDim
                    IntegerLiteral	value: -1	type: i32
            Id	name: %n	scope: 1	type: i32	size: 4
        CompoundStmt
            IfStmt
                BinaryExpr	op: eq     type:i1
                    Id	name: %n	scope: 1	type: i32	size: 4
                    IntegerLiteral	value: 0	type: i32
                ReturnStmt
                    IntegerLiteral	value: 0	type: i32
            IfStmt
                BinaryExpr	op: eq     type:i1
                    Id	name: %n	scope: 1	type: i32	size: 4
                    IntegerLiteral	value: 1	type: i32
                ReturnStmt
                    Id	name: %nums	scope: 1	type: int array	size: 4
                        ArrayDimensions
                        ArrDim
                            IntegerLiteral	value: 0	type: i32
            DeclStmt
            DefNode	Variable	NonArray
                Id	name: sum	scope: 2	type: i32	size: 4
                This variable/constant is not assigned
            AssignStmt
                Id	name: sum	scope: 2	type: i32	size: 4
                Id	name: %nums	scope: 1	type: int array	size: 4
                    ArrayDimensions
                    ArrDim
                        IntegerLiteral	value: 0	type: i32
            DeclStmt
            DefNode	Variable	NonArray
                Id	name: max	scope: 2	type: i32	size: 4
                This variable/constant is not assigned
            AssignStmt
                Id	name: max	scope: 2	type: i32	size: 4
                Id	name: sum	scope: 2	type: i32	size: 4
            DeclStmt
            DefNode	Variable	NonArray
                Id	name: i	scope: 2	type: i32	size: 4
                This variable/constant is not assigned
            AssignStmt
                Id	name: i	scope: 2	type: i32	size: 4
                IntegerLiteral	value: 1	type: i32
            WhileStmt
                BinaryExpr	op: less     type:i1
                    Id	name: i	scope: 2	type: i32	size: 4
                    Id	name: %n	scope: 1	type: i32	size: 4
                CompoundStmt
                    IfStmt
                        BinaryExpr	op: less     type:i1
                            Id	name: sum	scope: 2	type: i32	size: 4
                            IntegerLiteral	value: 0	type: i32
                        AssignStmt
                            Id	name: sum	scope: 2	type: i32	size: 4
                            IntegerLiteral	value: 0	type: i32
                    AssignStmt
                        Id	name: sum	scope: 2	type: i32	size: 4
                        BinaryExpr	op: add     type:i32
                            Id	name: sum	scope: 2	type: i32	size: 4
                            Id	name: %nums	scope: 1	type: int array	size: 4
                                ArrayDimensions
                                ArrDim
                                    Id	name: i	scope: 2	type: i32	size: 4
                    IfStmt
                        BinaryExpr	op: less     type:i1
                            Id	name: max	scope: 2	type: i32	size: 4
                            Id	name: sum	scope: 2	type: i32	size: 4
                        AssignStmt
                            Id	name: max	scope: 2	type: i32	size: 4
                            Id	name: sum	scope: 2	type: i32	size: 4
                    AssignStmt
                        Id	name: i	scope: 2	type: i32	size: 4
                        BinaryExpr	op: add     type:i32
                            Id	name: i	scope: 2	type: i32	size: 4
                            IntegerLiteral	value: 1	type: i32
            ReturnStmt
                Id	name: max	scope: 2	type: i32	size: 4
    FunctionDefine function name: @main, type: i32
        FuncDefParamsNode NULL
        CompoundStmt
            DeclStmt
            DefNode	Variable	NonArray
                Id	name: res	scope: 2	type: i32	size: 4
                This variable/constant is not assigned
            DeclStmt
            DefNode	Variable	Array
                Id	name: a	scope: 2	type: int array	size: 40
                    ArrayDimensions
                    ArrDim
                        IntegerLiteral	value: 10	type: i32
                This variable/constant is not assigned
            AssignStmt
                Id	name: a	scope: 2	type: int array	size: 40
                    ArrayDimensions
                    ArrDim
                        IntegerLiteral	value: 0	type: i32
                IntegerLiteral	value: -4	type: i32
            AssignStmt
                Id	name: a	scope: 2	type: int array	size: 40
                    ArrayDimensions
                    ArrDim
                        IntegerLiteral	value: 1	type: i32
                IntegerLiteral	value: 3	type: i32
            AssignStmt
                Id	name: a	scope: 2	type: int array	size: 40
                    ArrayDimensions
                    ArrDim
                        IntegerLiteral	value: 2	type: i32
                IntegerLiteral	value: 9	type: i32
            AssignStmt
                Id	name: a	scope: 2	type: int array	size: 40
                    ArrayDimensions
                    ArrDim
                        IntegerLiteral	value: 3	type: i32
                IntegerLiteral	value: -2	type: i32
            AssignStmt
                Id	name: a	scope: 2	type: int array	size: 40
                    ArrayDimensions
                    ArrDim
                        IntegerLiteral	value: 4	type: i32
                IntegerLiteral	value: 0	type: i32
            AssignStmt
                Id	name: a	scope: 2	type: int array	size: 40
                    ArrayDimensions
                    ArrDim
                        IntegerLiteral	value: 5	type: i32
                IntegerLiteral	value: 1	type: i32
            AssignStmt
                Id	name: a	scope: 2	type: int array	size: 40
                    ArrayDimensions
                    ArrDim
                        IntegerLiteral	value: 6	type: i32
                IntegerLiteral	value: -6	type: i32
            AssignStmt
                Id	name: a	scope: 2	type: int array	size: 40
                    ArrayDimensions
                    ArrDim
                        IntegerLiteral	value: 7	type: i32
                IntegerLiteral	value: 5	type: i32
            AssignStmt
                Id	name: a	scope: 2	type: int array	size: 40
                    ArrayDimensions
                    ArrDim
                        IntegerLiteral	value: 8	type: i32
                IntegerLiteral	value: 7	type: i32
            AssignStmt
                Id	name: a	scope: 2	type: int array	size: 40
                    ArrayDimensions
                    ArrDim
                        IntegerLiteral	value: 9	type: i32
                IntegerLiteral	value: 8	type: i32
            AssignStmt
                Id	name: res	scope: 2	type: i32	size: 4
                IntegerLiteral	value: 10	type: i32
            AssignStmt
                Id	name: res	scope: 2	type: i32	size: 4
                FuncCallNode	funcName: @maxSubArray	 funcType: i32	scope: 0
                    FuncCallParamsNode
                        Id	name: a	scope: 2	type: int array	size: 40
                        Id	name: res	scope: 2	type: i32	size: 4
            ReturnStmt
                Id	name: res	scope: 2	type: i32	size: 4
ReturnStmt::genCode
ReturnStmt::genCode
Id::ArrgenCode
DeclStmt::genCode
AssignStmt::genCode
Id::ArrgenCode
DeclStmt::genCode
AssignStmt::genCode
DeclStmt::genCode
AssignStmt::genCode
WhileStmt::genCode
AssignStmt::genCode
AssignStmt::genCode
Id::ArrgenCode
AssignStmt::genCode
AssignStmt::genCode
ReturnStmt::genCode
DeclStmt::genCode
DeclStmt::genCode
AssignStmt::genCode
AssignStmt::genCode
AssignStmt::genCode
AssignStmt::genCode
AssignStmt::genCode
AssignStmt::genCode
AssignStmt::genCode
AssignStmt::genCode
AssignStmt::genCode
AssignStmt::genCode
AssignStmt::genCode
AssignStmt::genCode
Id::ArrgenCode
callParams[0]->getexprkind() == ExprNode::CONSTANT  is 0
callParams[1]->getexprkind() == ExprNode::CONSTANT  is 0
ReturnStmt::genCode
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode1
StoreInstruction::genMachineCode  end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode1
StoreInstruction::genMachineCode  end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
CmpInstruction::genMachineCode
CmpInstruction::genMachineCode end
CondBrInstruction::genMachineCode
CondBrInstruction::genMachineCode end
RetInstruction::genMachineCode
RetInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
CmpInstruction::genMachineCode
CmpInstruction::genMachineCode end
CondBrInstruction::genMachineCode
CondBrInstruction::genMachineCode end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
RetInstruction::genMachineCode
RetInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
CmpInstruction::genMachineCode
CmpInstruction::genMachineCode end
CondBrInstruction::genMachineCode
CondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
CmpInstruction::genMachineCode
CmpInstruction::genMachineCode end
CondBrInstruction::genMachineCode
CondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
RetInstruction::genMachineCode
RetInstruction::genMachineCode end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
CmpInstruction::genMachineCode
CmpInstruction::genMachineCode end
CondBrInstruction::genMachineCode
CondBrInstruction::genMachineCode end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
CallInstruction::genMachineCode
CallInstruction::genMachineCode int
CallInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
RetInstruction::genMachineCode
RetInstruction::genMachineCode end
	.arch armv8-a
	.fpu vfpv3-d16
	.arch_extension crc
	.arm
	.text
	.global maxSubArray
	.type maxSubArray , %function
maxSubArray:
	push {r6, r7, r8, r9, r10, fp, lr}
	mov fp, sp
BinaryMInstruction::output() 
	sub sp, sp, #20
.L11:
	str r0, [fp, #-20]
	str r1, [fp, #-16]
	ldr r10, [fp, #-16]
	ldr r9, =0
	cmp r10, r9
	moveq r10, #1
	movne r10, #0
	beq .L14
	b .L18
.L14:
	ldr r10, =0
	mov r0, r10
	b .LmaxSubArray_END
.L15:
	ldr r10, [fp, #-16]
	ldr r9, =1
	cmp r10, r9
	moveq r10, #1
	movne r10, #0
	beq .L20
	b .L24
.L17:
.L18:
	b .L15
.L19:
.L20:
	ldr r10, [fp, #-20]
	ldr r9, =0
	ldr r8, =4
BinaryMInstruction::output() 
	mul r7, r9, r8
BinaryMInstruction::output() 
	add r9, r7, r10
	ldr r10, [r9]
	mov r0, r10
	b .LmaxSubArray_END
.L21:
	ldr r10, [fp, #-20]
	ldr r9, =0
	ldr r8, =4
BinaryMInstruction::output() 
	mul r7, r9, r8
BinaryMInstruction::output() 
	add r9, r7, r10
	ldr r10, [r9]
	str r10, [fp, #-12]
	ldr r10, [fp, #-12]
	str r10, [fp, #-8]
	ldr r10, =1
	str r10, [fp, #-4]
	b .L38
.L23:
.L24:
	b .L21
.L25:
.L38:
	ldr r10, [fp, #-4]
	ldr r9, [fp, #-16]
	cmp r10, r9
	movlt r10, #1
	movge r10, #0
	blt .L39
	b .L44
.L39:
	ldr r10, [fp, #-12]
	ldr r9, =0
	cmp r10, r9
	movlt r10, #1
	movge r10, #0
	blt .L46
	b .L50
.L40:
	ldr r10, [fp, #-8]
	mov r0, r10
	b .LmaxSubArray_END
.L43:
.L44:
	b .L40
.L45:
.L46:
	ldr r10, =0
	str r10, [fp, #-12]
	b .L47
.L47:
	ldr r10, [fp, #-12]
	ldr r9, [fp, #-4]
	ldr r8, [fp, #-20]
	ldr r7, =4
BinaryMInstruction::output() 
	mul r6, r9, r7
BinaryMInstruction::output() 
	add r9, r6, r8
	ldr r8, [r9]
BinaryMInstruction::output() 
	add r9, r10, r8
	str r9, [fp, #-12]
	ldr r10, [fp, #-8]
	ldr r9, [fp, #-12]
	cmp r10, r9
	movlt r10, #1
	movge r10, #0
	blt .L58
	b .L63
.L49:
.L50:
	b .L47
.L51:
.L58:
	ldr r10, [fp, #-12]
	str r10, [fp, #-8]
	b .L59
.L59:
	ldr r10, [fp, #-4]
BinaryMInstruction::output() 
	add r9, r10, #1
	str r9, [fp, #-4]
	b .L38
.L62:
.L63:
	b .L59
.L64:
.LmaxSubArray_END:
BinaryMInstruction::output() 
	add sp, sp, #20
	pop {r6, r7, r8, r9, r10, fp, lr}
	bx  lr

	.global main
	.type main , %function
main:
	push {r8, r9, r10, fp, lr}
	mov fp, sp
BinaryMInstruction::output() 
	sub sp, sp, #44
.L68:
	ldr r10, =0
	ldr r9, =4
BinaryMInstruction::output() 
	mul r8, r10, r9
BinaryMInstruction::output() 
	add r10, r8, #-40
	ldr r9, =-4
BinaryMInstruction::output() 
	add r8, fp, r10
	str r9, [r8]
	ldr r10, =1
	ldr r9, =4
BinaryMInstruction::output() 
	mul r8, r10, r9
BinaryMInstruction::output() 
	add r10, r8, #-40
	ldr r9, =3
BinaryMInstruction::output() 
	add r8, fp, r10
	str r9, [r8]
	ldr r10, =2
	ldr r9, =4
BinaryMInstruction::output() 
	mul r8, r10, r9
BinaryMInstruction::output() 
	add r10, r8, #-40
	ldr r9, =9
BinaryMInstruction::output() 
	add r8, fp, r10
	str r9, [r8]
	ldr r10, =3
	ldr r9, =4
BinaryMInstruction::output() 
	mul r8, r10, r9
BinaryMInstruction::output() 
	add r10, r8, #-40
	ldr r9, =-2
BinaryMInstruction::output() 
	add r8, fp, r10
	str r9, [r8]
	ldr r10, =4
	ldr r9, =4
BinaryMInstruction::output() 
	mul r8, r10, r9
BinaryMInstruction::output() 
	add r10, r8, #-40
	ldr r9, =0
BinaryMInstruction::output() 
	add r8, fp, r10
	str r9, [r8]
	ldr r10, =5
	ldr r9, =4
BinaryMInstruction::output() 
	mul r8, r10, r9
BinaryMInstruction::output() 
	add r10, r8, #-40
	ldr r9, =1
BinaryMInstruction::output() 
	add r8, fp, r10
	str r9, [r8]
	ldr r10, =6
	ldr r9, =4
BinaryMInstruction::output() 
	mul r8, r10, r9
BinaryMInstruction::output() 
	add r10, r8, #-40
	ldr r9, =-6
BinaryMInstruction::output() 
	add r8, fp, r10
	str r9, [r8]
	ldr r10, =7
	ldr r9, =4
BinaryMInstruction::output() 
	mul r8, r10, r9
BinaryMInstruction::output() 
	add r10, r8, #-40
	ldr r9, =5
BinaryMInstruction::output() 
	add r8, fp, r10
	str r9, [r8]
	ldr r10, =8
	ldr r9, =4
BinaryMInstruction::output() 
	mul r8, r10, r9
BinaryMInstruction::output() 
	add r10, r8, #-40
	ldr r9, =7
BinaryMInstruction::output() 
	add r8, fp, r10
	str r9, [r8]
	ldr r10, =9
	ldr r9, =4
BinaryMInstruction::output() 
	mul r8, r10, r9
BinaryMInstruction::output() 
	add r10, r8, #-40
	ldr r9, =8
BinaryMInstruction::output() 
	add r8, fp, r10
	str r9, [r8]
	ldr r10, =10
	str r10, [fp, #-44]
	ldr r10, =0
BinaryMInstruction::output() 
	add r9, r10, #-40
	ldr r10, [fp, #-44]
	mov r1, r10
BinaryMInstruction::output() 
	add r10, fp, r9
	mov r0, r10
	bl  maxSubArray
	mov r10, r0
	str r10, [fp, #-44]
	ldr r10, [fp, #-44]
	mov r0, r10
	b .Lmain_END
.Lmain_END:
BinaryMInstruction::output() 
	add sp, sp, #44
	pop {r8, r9, r10, fp, lr}
	bx  lr

