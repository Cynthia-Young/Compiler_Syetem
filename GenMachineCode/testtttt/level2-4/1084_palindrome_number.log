typecheck fin
program
    FunctionDefine function name: @palindrome, type: i32
        FuncDefParamsNode
            Id	name: %n	scope: 1	type: i32	size: 4
        CompoundStmt
            DeclStmt
            DefNode	Variable	Array
                Id	name: a	scope: 2	type: int array	size: 16
                    ArrayDimensions
                    ArrDim
                        IntegerLiteral	value: 4	type: i32
                This variable/constant is not assigned
            DeclStmt
            DefNode	Variable	NonArray
                Id	name: j	scope: 2	type: i32	size: 4
                This variable/constant is not assigned
            DeclStmt
            DefNode	Variable	NonArray
                Id	name: flag	scope: 2	type: i32	size: 4
                This variable/constant is not assigned
            AssignStmt
                Id	name: j	scope: 2	type: i32	size: 4
                IntegerLiteral	value: 0	type: i32
            WhileStmt
                BinaryExpr	op: less     type:i1
                    Id	name: j	scope: 2	type: i32	size: 4
                    IntegerLiteral	value: 4	type: i32
                CompoundStmt
                    AssignStmt
                        Id	name: a	scope: 2	type: int array	size: 16
                            ArrayDimensions
                            ArrDim
                                Id	name: j	scope: 2	type: i32	size: 4
                        BinaryExpr	op: mod     type:i32
                            Id	name: %n	scope: 1	type: i32	size: 4
                            IntegerLiteral	value: 10	type: i32
                    AssignStmt
                        Id	name: %n	scope: 1	type: i32	size: 4
                        BinaryExpr	op: div     type:i32
                            Id	name: %n	scope: 1	type: i32	size: 4
                            IntegerLiteral	value: 10	type: i32
                    AssignStmt
                        Id	name: j	scope: 2	type: i32	size: 4
                        BinaryExpr	op: add     type:i32
                            Id	name: j	scope: 2	type: i32	size: 4
                            IntegerLiteral	value: 1	type: i32
            IfElseStmt
                BinaryExpr	op: and     type:i1
                    BinaryExpr	op: eq     type:i1
                        Id	name: a	scope: 2	type: int array	size: 16
                            ArrayDimensions
                            ArrDim
                                IntegerLiteral	value: 0	type: i32
                        Id	name: a	scope: 2	type: int array	size: 16
                            ArrayDimensions
                            ArrDim
                                IntegerLiteral	value: 3	type: i32
                    BinaryExpr	op: eq     type:i1
                        Id	name: a	scope: 2	type: int array	size: 16
                            ArrayDimensions
                            ArrDim
                                IntegerLiteral	value: 1	type: i32
                        Id	name: a	scope: 2	type: int array	size: 16
                            ArrayDimensions
                            ArrDim
                                IntegerLiteral	value: 2	type: i32
                CompoundStmt
                    AssignStmt
                        Id	name: flag	scope: 2	type: i32	size: 4
                        IntegerLiteral	value: 1	type: i32
                CompoundStmt
                    AssignStmt
                        Id	name: flag	scope: 2	type: i32	size: 4
                        IntegerLiteral	value: 0	type: i32
            ReturnStmt
                Id	name: flag	scope: 2	type: i32	size: 4
    FunctionDefine function name: @main, type: i32
        FuncDefParamsNode NULL
        CompoundStmt
            DeclStmt
            DefNode	Variable	NonArray
                Id	name: test	scope: 2	type: i32	size: 4
                This variable/constant is not assigned
            AssignStmt
                Id	name: test	scope: 2	type: i32	size: 4
                IntegerLiteral	value: 1221	type: i32
            DeclStmt
            DefNode	Variable	NonArray
                Id	name: flag	scope: 2	type: i32	size: 4
                This variable/constant is not assigned
            AssignStmt
                Id	name: flag	scope: 2	type: i32	size: 4
                FuncCallNode	funcName: @palindrome	 funcType: i32	scope: 0
                    FuncCallParamsNode
                        Id	name: test	scope: 2	type: i32	size: 4
            IfElseStmt
                BinaryExpr	op: eq     type:i1
                    Id	name: flag	scope: 2	type: i32	size: 4
                    IntegerLiteral	value: 1	type: i32
                ExprStmtNode
                    FuncCallNode	funcName: @putint	 funcType: void	scope: 0
                        FuncCallParamsNode
                            Id	name: test	scope: 2	type: i32	size: 4
                CompoundStmt
                    AssignStmt
                        Id	name: flag	scope: 2	type: i32	size: 4
                        IntegerLiteral	value: 0	type: i32
                    ExprStmtNode
                        FuncCallNode	funcName: @putint	 funcType: void	scope: 0
                            FuncCallParamsNode
                                Id	name: flag	scope: 2	type: i32	size: 4
            AssignStmt
                Id	name: flag	scope: 2	type: i32	size: 4
                IntegerLiteral	value: 10	type: i32
            ExprStmtNode
                FuncCallNode	funcName: @putch	 funcType: void	scope: 0
                    FuncCallParamsNode
                        Id	name: flag	scope: 2	type: i32	size: 4
            ReturnStmt
                IntegerLiteral	value: 0	type: i32
DeclStmt::genCode
DeclStmt::genCode
DeclStmt::genCode
AssignStmt::genCode
WhileStmt::genCode
AssignStmt::genCode
AssignStmt::genCode
AssignStmt::genCode
Id::ArrgenCode
Id::ArrgenCode
Id::ArrgenCode
Id::ArrgenCode
AssignStmt::genCode
AssignStmt::genCode
ReturnStmt::genCode
DeclStmt::genCode
AssignStmt::genCode
DeclStmt::genCode
AssignStmt::genCode
callParams[0]->getexprkind() == ExprNode::CONSTANT  is 0
callParams[0]->getexprkind() == ExprNode::CONSTANT  is 0
AssignStmt::genCode
callParams[0]->getexprkind() == ExprNode::CONSTANT  is 0
AssignStmt::genCode
callParams[0]->getexprkind() == ExprNode::CONSTANT  is 0
ReturnStmt::genCode
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode1
StoreInstruction::genMachineCode  end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
CmpInstruction::genMachineCode
CmpInstruction::genMachineCode end
CondBrInstruction::genMachineCode
CondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode7
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode7
LoadInstruction::genMachineCode end
CmpInstruction::genMachineCode
CmpInstruction::genMachineCode end
CondBrInstruction::genMachineCode
CondBrInstruction::genMachineCode end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
RetInstruction::genMachineCode
RetInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode7
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode7
LoadInstruction::genMachineCode end
CmpInstruction::genMachineCode
CmpInstruction::genMachineCode end
CondBrInstruction::genMachineCode
CondBrInstruction::genMachineCode end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
CallInstruction::genMachineCode
CallInstruction::genMachineCode int
CallInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
CmpInstruction::genMachineCode
CmpInstruction::genMachineCode end
CondBrInstruction::genMachineCode
CondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
CallInstruction::genMachineCode
CallInstruction::genMachineCode int
CallInstruction::genMachineCode end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
CallInstruction::genMachineCode
CallInstruction::genMachineCode int
CallInstruction::genMachineCode end
RetInstruction::genMachineCode
RetInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
CallInstruction::genMachineCode
CallInstruction::genMachineCode int
CallInstruction::genMachineCode end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
	.arch armv8-a
	.fpu vfpv3-d16
	.arch_extension crc
	.arm
	.text
	.global palindrome
	.type palindrome , %function
palindrome:
	push {r7, r8, r9, r10, fp, lr}
	mov fp, sp
BinaryMInstruction::output() 
	sub sp, sp, #28
.L12:
	str r0, [fp, #-28]
	ldr r10, =0
	str r10, [fp, #-8]
	b .L17
.L17:
	ldr r10, [fp, #-8]
	ldr r9, =4
	cmp r10, r9
	movlt r10, #1
	movge r10, #0
	blt .L18
	b .L22
.L18:
	ldr r10, [fp, #-28]
	ldr r9, =10
BinaryMInstruction::output() 
	sdiv r8, r10, r9
BinaryMInstruction::output() 
	mul r9, r8, r9
BinaryMInstruction::output() 
	sub r8, r10, r9
	ldr r10, [fp, #-8]
	ldr r9, =4
BinaryMInstruction::output() 
	mul r7, r10, r9
BinaryMInstruction::output() 
	add r10, r7, #-24
BinaryMInstruction::output() 
	add r9, fp, r10
	str r8, [r9]
	ldr r10, [fp, #-28]
	ldr r9, =10
BinaryMInstruction::output() 
	sdiv r8, r10, r9
	str r8, [fp, #-28]
	ldr r10, [fp, #-8]
BinaryMInstruction::output() 
	add r9, r10, #1
	str r9, [fp, #-8]
	b .L17
.L19:
	ldr r10, =0
	ldr r9, =4
BinaryMInstruction::output() 
	mul r8, r10, r9
BinaryMInstruction::output() 
	add r10, r8, #-24
BinaryMInstruction::output() 
	add r10, fp, r10
	ldr r9, [r10]
	ldr r10, =3
	ldr r8, =4
BinaryMInstruction::output() 
	mul r7, r10, r8
BinaryMInstruction::output() 
	add r10, r7, #-24
BinaryMInstruction::output() 
	add r8, fp, r10
	ldr r10, [r8]
	cmp r9, r10
	moveq r10, #1
	movne r10, #0
	beq .L33
	b .L41
.L21:
.L22:
	b .L19
.L23:
.L30:
	ldr r10, =1
	str r10, [fp, #-4]
	b .L31
.L31:
	ldr r10, [fp, #-4]
	mov r0, r10
	b .Lpalindrome_END
.L32:
	ldr r10, =0
	str r10, [fp, #-4]
	b .L31
.L33:
	ldr r10, =1
	ldr r9, =4
BinaryMInstruction::output() 
	mul r8, r10, r9
BinaryMInstruction::output() 
	add r10, r8, #-24
BinaryMInstruction::output() 
	add r9, fp, r10
	ldr r10, [r9]
	ldr r9, =2
	ldr r8, =4
BinaryMInstruction::output() 
	mul r7, r9, r8
BinaryMInstruction::output() 
	add r9, r7, #-24
BinaryMInstruction::output() 
	add r8, fp, r9
	ldr r9, [r8]
	cmp r10, r9
	moveq r10, #1
	movne r10, #0
	beq .L30
	b .L50
.L40:
.L41:
	b .L32
.L42:
.L49:
.L50:
	b .L32
.L51:
.Lpalindrome_END:
BinaryMInstruction::output() 
	add sp, sp, #28
	pop {r7, r8, r9, r10, fp, lr}
	bx  lr

	.global main
	.type main , %function
main:
	push {r9, r10, fp, lr}
	mov fp, sp
BinaryMInstruction::output() 
	sub sp, sp, #8
.L53:
	ldr r10, =1221
	str r10, [fp, #-8]
	ldr r10, [fp, #-8]
	mov r0, r10
	bl  palindrome
	mov r10, r0
	str r10, [fp, #-4]
	ldr r10, [fp, #-4]
	ldr r9, =1
	cmp r10, r9
	moveq r10, #1
	movne r10, #0
	beq .L57
	b .L62
.L57:
	ldr r10, [fp, #-8]
	mov r0, r10
	bl  putint
	b .L58
.L58:
	ldr r10, =10
	str r10, [fp, #-4]
	ldr r10, [fp, #-4]
	mov r0, r10
	bl  putch
	ldr r10, =0
	mov r0, r10
	b .Lmain_END
.L59:
	ldr r10, =0
	str r10, [fp, #-4]
	ldr r10, [fp, #-4]
	mov r0, r10
	bl  putint
	b .L58
.L61:
.L62:
	b .L59
.L63:
.Lmain_END:
BinaryMInstruction::output() 
	add sp, sp, #8
	pop {r9, r10, fp, lr}
	bx  lr

TOTAL: 0H-0M-0S-0us
