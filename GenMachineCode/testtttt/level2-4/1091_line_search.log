typecheck fin
program
    FunctionDefine function name: @main, type: i32
        FuncDefParamsNode NULL
        CompoundStmt
            DeclStmt
            DefNode	Variable	NonArray
                Id	name: i	scope: 2	type: i32	size: 4
                This variable/constant is not assigned
            DeclStmt
            DefNode	Variable	NonArray
                Id	name: sum	scope: 2	type: i32	size: 4
                This variable/constant is not assigned
            DeclStmt
            DefNode	Variable	Array
                Id	name: a	scope: 2	type: int array	size: 40
                    ArrayDimensions
                    ArrDim
                        IntegerLiteral	value: 10	type: i32
                This variable/constant is not assigned
            AssignStmt
                Id	name: sum	scope: 2	type: i32	size: 4
                IntegerLiteral	value: 0	type: i32
            AssignStmt
                Id	name: i	scope: 2	type: i32	size: 4
                IntegerLiteral	value: 0	type: i32
            WhileStmt
                BinaryExpr	op: less     type:i1
                    Id	name: i	scope: 2	type: i32	size: 4
                    IntegerLiteral	value: 10	type: i32
                CompoundStmt
                    AssignStmt
                        Id	name: a	scope: 2	type: int array	size: 40
                            ArrayDimensions
                            ArrDim
                                Id	name: i	scope: 2	type: i32	size: 4
                        BinaryExpr	op: add     type:i32
                            Id	name: i	scope: 2	type: i32	size: 4
                            IntegerLiteral	value: 1	type: i32
                    AssignStmt
                        Id	name: i	scope: 2	type: i32	size: 4
                        BinaryExpr	op: add     type:i32
                            Id	name: i	scope: 2	type: i32	size: 4
                            IntegerLiteral	value: 1	type: i32
            DeclStmt
            DefNode	Variable	NonArray
                Id	name: x	scope: 2	type: i32	size: 4
                This variable/constant is not assigned
            DeclStmt
            DefNode	Variable	NonArray
                Id	name: high	scope: 2	type: i32	size: 4
                This variable/constant is not assigned
            DeclStmt
            DefNode	Variable	NonArray
                Id	name: low	scope: 2	type: i32	size: 4
                This variable/constant is not assigned
            DeclStmt
            DefNode	Variable	NonArray
                Id	name: mid	scope: 2	type: i32	size: 4
                This variable/constant is not assigned
            DeclStmt
            DefNode	Variable	NonArray
                Id	name: n	scope: 2	type: i32	size: 4
                This variable/constant is not assigned
            AssignStmt
                Id	name: n	scope: 2	type: i32	size: 4
                IntegerLiteral	value: 10	type: i32
            AssignStmt
                Id	name: x	scope: 2	type: i32	size: 4
                FuncCallNode	funcName: @getint	 funcType: i32	scope: 0
                    FuncCallParamsNode NULL
            AssignStmt
                Id	name: high	scope: 2	type: i32	size: 4
                BinaryExpr	op: sub     type:i32
                    Id	name: n	scope: 2	type: i32	size: 4
                    IntegerLiteral	value: 1	type: i32
            AssignStmt
                Id	name: low	scope: 2	type: i32	size: 4
                IntegerLiteral	value: 0	type: i32
            AssignStmt
                Id	name: mid	scope: 2	type: i32	size: 4
                BinaryExpr	op: div     type:i32
                    BinaryExpr	op: add     type:i32
                        Id	name: high	scope: 2	type: i32	size: 4
                        Id	name: low	scope: 2	type: i32	size: 4
                    IntegerLiteral	value: 2	type: i32
            DeclStmt
            DefNode	Variable	NonArray
                Id	name: flag	scope: 2	type: i32	size: 4
                This variable/constant is not assigned
            AssignStmt
                Id	name: flag	scope: 2	type: i32	size: 4
                IntegerLiteral	value: 0	type: i32
            AssignStmt
                Id	name: i	scope: 2	type: i32	size: 4
                IntegerLiteral	value: 0	type: i32
            DeclStmt
            DefNode	Variable	NonArray
                Id	name: j	scope: 2	type: i32	size: 4
                This variable/constant is not assigned
            AssignStmt
                Id	name: j	scope: 2	type: i32	size: 4
                IntegerLiteral	value: 0	type: i32
            WhileStmt
                BinaryExpr	op: and     type:i1
                    BinaryExpr	op: less     type:i1
                        Id	name: i	scope: 2	type: i32	size: 4
                        IntegerLiteral	value: 10	type: i32
                    BinaryExpr	op: eq     type:i1
                        Id	name: flag	scope: 2	type: i32	size: 4
                        IntegerLiteral	value: 0	type: i32
                CompoundStmt
                    IfStmt
                        BinaryExpr	op: eq     type:i1
                            Id	name: a	scope: 2	type: int array	size: 40
                                ArrayDimensions
                                ArrDim
                                    Id	name: i	scope: 2	type: i32	size: 4
                            Id	name: x	scope: 2	type: i32	size: 4
                        CompoundStmt
                            AssignStmt
                                Id	name: flag	scope: 2	type: i32	size: 4
                                IntegerLiteral	value: 1	type: i32
                            AssignStmt
                                Id	name: j	scope: 2	type: i32	size: 4
                                Id	name: i	scope: 2	type: i32	size: 4
                    AssignStmt
                        Id	name: i	scope: 2	type: i32	size: 4
                        BinaryExpr	op: add     type:i32
                            Id	name: i	scope: 2	type: i32	size: 4
                            IntegerLiteral	value: 1	type: i32
            IfElseStmt
                BinaryExpr	op: eq     type:i1
                    Id	name: flag	scope: 2	type: i32	size: 4
                    IntegerLiteral	value: 1	type: i32
                ExprStmtNode
                    FuncCallNode	funcName: @putint	 funcType: void	scope: 0
                        FuncCallParamsNode
                            Id	name: j	scope: 2	type: i32	size: 4
                CompoundStmt
                    AssignStmt
                        Id	name: x	scope: 2	type: i32	size: 4
                        IntegerLiteral	value: 0	type: i32
                    ExprStmtNode
                        FuncCallNode	funcName: @putint	 funcType: void	scope: 0
                            FuncCallParamsNode
                                Id	name: x	scope: 2	type: i32	size: 4
            AssignStmt
                Id	name: x	scope: 2	type: i32	size: 4
                IntegerLiteral	value: 10	type: i32
            ExprStmtNode
                FuncCallNode	funcName: @putch	 funcType: void	scope: 0
                    FuncCallParamsNode
                        Id	name: x	scope: 2	type: i32	size: 4
            ReturnStmt
                IntegerLiteral	value: 0	type: i32
DeclStmt::genCode
DeclStmt::genCode
DeclStmt::genCode
AssignStmt::genCode
AssignStmt::genCode
WhileStmt::genCode
AssignStmt::genCode
AssignStmt::genCode
DeclStmt::genCode
DeclStmt::genCode
DeclStmt::genCode
DeclStmt::genCode
DeclStmt::genCode
AssignStmt::genCode
AssignStmt::genCode
AssignStmt::genCode
AssignStmt::genCode
AssignStmt::genCode
DeclStmt::genCode
AssignStmt::genCode
AssignStmt::genCode
DeclStmt::genCode
AssignStmt::genCode
WhileStmt::genCode
Id::ArrgenCode
AssignStmt::genCode
AssignStmt::genCode
AssignStmt::genCode
callParams[0]->getexprkind() == ExprNode::CONSTANT  is 0
AssignStmt::genCode
callParams[0]->getexprkind() == ExprNode::CONSTANT  is 0
AssignStmt::genCode
callParams[0]->getexprkind() == ExprNode::CONSTANT  is 0
ReturnStmt::genCode
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
CmpInstruction::genMachineCode
CmpInstruction::genMachineCode end
CondBrInstruction::genMachineCode
CondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
CallInstruction::genMachineCode
CallInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
CmpInstruction::genMachineCode
CmpInstruction::genMachineCode end
CondBrInstruction::genMachineCode
CondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
if(opcode == MUL || opcode == DI
BinaryInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode7
LoadInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
CmpInstruction::genMachineCode
CmpInstruction::genMachineCode end
CondBrInstruction::genMachineCode
CondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
CmpInstruction::genMachineCode
CmpInstruction::genMachineCode end
CondBrInstruction::genMachineCode
CondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
CmpInstruction::genMachineCode
CmpInstruction::genMachineCode end
CondBrInstruction::genMachineCode
CondBrInstruction::genMachineCode end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
BinaryInstruction::genMachineCode
BinaryInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
CallInstruction::genMachineCode
CallInstruction::genMachineCode int
CallInstruction::genMachineCode end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
CallInstruction::genMachineCode
CallInstruction::genMachineCode int
CallInstruction::genMachineCode end
RetInstruction::genMachineCode
RetInstruction::genMachineCode end
StoreInstruction::genMachineCode
StoreInstruction::genMachineCode  end
LoadInstruction::genMachineCode
LoadInstruction::genMachineCode end
CallInstruction::genMachineCode
CallInstruction::genMachineCode int
CallInstruction::genMachineCode end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
UncondBrInstruction::genMachineCode
UncondBrInstruction::genMachineCode end
	.arch armv8-a
	.fpu vfpv3-d16
	.arch_extension crc
	.arm
	.text
	.global main
	.type main , %function
main:
	push {r7, r8, r9, r10, fp, lr}
	mov fp, sp
BinaryMInstruction::output() 
	sub sp, sp, #76
.L16:
	ldr r10, =0
	str r10, [fp, #-72]
	ldr r10, =0
	str r10, [fp, #-76]
	b .L20
.L20:
	ldr r10, [fp, #-76]
	ldr r9, =10
	cmp r10, r9
	movlt r10, #1
	movge r10, #0
	blt .L21
	b .L25
.L21:
	ldr r10, [fp, #-76]
BinaryMInstruction::output() 
	add r9, r10, #1
	ldr r10, [fp, #-76]
	ldr r8, =4
BinaryMInstruction::output() 
	mul r7, r10, r8
BinaryMInstruction::output() 
	add r10, r7, #-68
BinaryMInstruction::output() 
	add r8, fp, r10
	str r9, [r8]
	ldr r10, [fp, #-76]
BinaryMInstruction::output() 
	add r9, r10, #1
	str r9, [fp, #-76]
	b .L20
.L22:
	ldr r10, =10
	str r10, [fp, #-12]
	bl  getint
	mov r10, r0
	str r10, [fp, #-28]
	ldr r10, [fp, #-12]
BinaryMInstruction::output() 
	sub r9, r10, #1
	str r9, [fp, #-24]
	ldr r10, =0
	str r10, [fp, #-20]
	ldr r10, [fp, #-24]
	ldr r9, [fp, #-20]
BinaryMInstruction::output() 
	add r8, r10, r9
	ldr r10, =2
BinaryMInstruction::output() 
	sdiv r9, r8, r10
	str r9, [fp, #-16]
	ldr r10, =0
	str r10, [fp, #-8]
	ldr r10, =0
	str r10, [fp, #-76]
	ldr r10, =0
	str r10, [fp, #-4]
	b .L42
.L24:
.L25:
	b .L22
.L26:
.L42:
	ldr r10, [fp, #-76]
	ldr r9, =10
	cmp r10, r9
	movlt r10, #1
	movge r10, #0
	blt .L45
	b .L48
.L43:
	ldr r10, [fp, #-76]
	ldr r9, =4
BinaryMInstruction::output() 
	mul r8, r10, r9
BinaryMInstruction::output() 
	add r10, r8, #-68
BinaryMInstruction::output() 
	add r9, fp, r10
	ldr r10, [r9]
	ldr r9, [fp, #-28]
	cmp r10, r9
	moveq r10, #1
	movne r10, #0
	beq .L54
	b .L62
.L44:
	ldr r10, [fp, #-8]
	ldr r9, =1
	cmp r10, r9
	moveq r10, #1
	movne r10, #0
	beq .L66
	b .L71
.L45:
	ldr r10, [fp, #-8]
	ldr r9, =0
	cmp r10, r9
	moveq r10, #1
	movne r10, #0
	beq .L43
	b .L52
.L47:
.L48:
	b .L44
.L49:
.L51:
.L52:
	b .L44
.L53:
.L54:
	ldr r10, =1
	str r10, [fp, #-8]
	ldr r10, [fp, #-76]
	str r10, [fp, #-4]
	b .L55
.L55:
	ldr r10, [fp, #-76]
BinaryMInstruction::output() 
	add r9, r10, #1
	str r9, [fp, #-76]
	b .L42
.L61:
.L62:
	b .L55
.L63:
.L66:
	ldr r10, [fp, #-4]
	mov r0, r10
	bl  putint
	b .L67
.L67:
	ldr r10, =10
	str r10, [fp, #-28]
	ldr r10, [fp, #-28]
	mov r0, r10
	bl  putch
	ldr r10, =0
	mov r0, r10
	b .Lmain_END
.L68:
	ldr r10, =0
	str r10, [fp, #-28]
	ldr r10, [fp, #-28]
	mov r0, r10
	bl  putint
	b .L67
.L70:
.L71:
	b .L68
.L72:
.Lmain_END:
BinaryMInstruction::output() 
	add sp, sp, #76
	pop {r7, r8, r9, r10, fp, lr}
	bx  lr

TOTAL: 0H-0M-0S-0us
